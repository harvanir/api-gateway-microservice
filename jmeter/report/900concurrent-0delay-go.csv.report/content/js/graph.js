/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 8418.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 4.0], [1.7, 4.0], [1.8, 4.0], [1.9, 4.0], [2.0, 4.0], [2.1, 4.0], [2.2, 4.0], [2.3, 4.0], [2.4, 4.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 7.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 8.0], [6.7, 8.0], [6.8, 8.0], [6.9, 8.0], [7.0, 8.0], [7.1, 8.0], [7.2, 8.0], [7.3, 8.0], [7.4, 8.0], [7.5, 8.0], [7.6, 8.0], [7.7, 8.0], [7.8, 8.0], [7.9, 8.0], [8.0, 8.0], [8.1, 8.0], [8.2, 8.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 8.0], [8.7, 9.0], [8.8, 9.0], [8.9, 9.0], [9.0, 9.0], [9.1, 9.0], [9.2, 9.0], [9.3, 9.0], [9.4, 9.0], [9.5, 9.0], [9.6, 9.0], [9.7, 9.0], [9.8, 9.0], [9.9, 9.0], [10.0, 9.0], [10.1, 9.0], [10.2, 9.0], [10.3, 9.0], [10.4, 9.0], [10.5, 9.0], [10.6, 9.0], [10.7, 9.0], [10.8, 9.0], [10.9, 9.0], [11.0, 9.0], [11.1, 10.0], [11.2, 10.0], [11.3, 10.0], [11.4, 10.0], [11.5, 10.0], [11.6, 10.0], [11.7, 10.0], [11.8, 10.0], [11.9, 10.0], [12.0, 10.0], [12.1, 10.0], [12.2, 10.0], [12.3, 10.0], [12.4, 10.0], [12.5, 10.0], [12.6, 10.0], [12.7, 10.0], [12.8, 10.0], [12.9, 10.0], [13.0, 10.0], [13.1, 10.0], [13.2, 10.0], [13.3, 10.0], [13.4, 10.0], [13.5, 10.0], [13.6, 10.0], [13.7, 10.0], [13.8, 10.0], [13.9, 11.0], [14.0, 11.0], [14.1, 11.0], [14.2, 11.0], [14.3, 11.0], [14.4, 11.0], [14.5, 11.0], [14.6, 11.0], [14.7, 11.0], [14.8, 11.0], [14.9, 11.0], [15.0, 11.0], [15.1, 11.0], [15.2, 11.0], [15.3, 11.0], [15.4, 11.0], [15.5, 11.0], [15.6, 11.0], [15.7, 11.0], [15.8, 11.0], [15.9, 11.0], [16.0, 11.0], [16.1, 11.0], [16.2, 11.0], [16.3, 11.0], [16.4, 11.0], [16.5, 11.0], [16.6, 11.0], [16.7, 11.0], [16.8, 11.0], [16.9, 11.0], [17.0, 11.0], [17.1, 12.0], [17.2, 12.0], [17.3, 12.0], [17.4, 12.0], [17.5, 12.0], [17.6, 12.0], [17.7, 12.0], [17.8, 12.0], [17.9, 12.0], [18.0, 12.0], [18.1, 12.0], [18.2, 12.0], [18.3, 12.0], [18.4, 12.0], [18.5, 12.0], [18.6, 12.0], [18.7, 12.0], [18.8, 12.0], [18.9, 12.0], [19.0, 12.0], [19.1, 12.0], [19.2, 12.0], [19.3, 12.0], [19.4, 12.0], [19.5, 12.0], [19.6, 12.0], [19.7, 12.0], [19.8, 12.0], [19.9, 12.0], [20.0, 12.0], [20.1, 12.0], [20.2, 12.0], [20.3, 12.0], [20.4, 12.0], [20.5, 12.0], [20.6, 13.0], [20.7, 13.0], [20.8, 13.0], [20.9, 13.0], [21.0, 13.0], [21.1, 13.0], [21.2, 13.0], [21.3, 13.0], [21.4, 13.0], [21.5, 13.0], [21.6, 13.0], [21.7, 13.0], [21.8, 13.0], [21.9, 13.0], [22.0, 13.0], [22.1, 13.0], [22.2, 13.0], [22.3, 13.0], [22.4, 13.0], [22.5, 13.0], [22.6, 13.0], [22.7, 13.0], [22.8, 13.0], [22.9, 13.0], [23.0, 13.0], [23.1, 13.0], [23.2, 13.0], [23.3, 13.0], [23.4, 13.0], [23.5, 13.0], [23.6, 13.0], [23.7, 13.0], [23.8, 13.0], [23.9, 13.0], [24.0, 13.0], [24.1, 13.0], [24.2, 14.0], [24.3, 14.0], [24.4, 14.0], [24.5, 14.0], [24.6, 14.0], [24.7, 14.0], [24.8, 14.0], [24.9, 14.0], [25.0, 14.0], [25.1, 14.0], [25.2, 14.0], [25.3, 14.0], [25.4, 14.0], [25.5, 14.0], [25.6, 14.0], [25.7, 14.0], [25.8, 14.0], [25.9, 14.0], [26.0, 14.0], [26.1, 14.0], [26.2, 14.0], [26.3, 14.0], [26.4, 14.0], [26.5, 14.0], [26.6, 14.0], [26.7, 14.0], [26.8, 14.0], [26.9, 14.0], [27.0, 14.0], [27.1, 14.0], [27.2, 14.0], [27.3, 14.0], [27.4, 14.0], [27.5, 14.0], [27.6, 14.0], [27.7, 14.0], [27.8, 14.0], [27.9, 14.0], [28.0, 15.0], [28.1, 15.0], [28.2, 15.0], [28.3, 15.0], [28.4, 15.0], [28.5, 15.0], [28.6, 15.0], [28.7, 15.0], [28.8, 15.0], [28.9, 15.0], [29.0, 15.0], [29.1, 15.0], [29.2, 15.0], [29.3, 15.0], [29.4, 15.0], [29.5, 15.0], [29.6, 15.0], [29.7, 15.0], [29.8, 15.0], [29.9, 15.0], [30.0, 15.0], [30.1, 15.0], [30.2, 15.0], [30.3, 15.0], [30.4, 15.0], [30.5, 15.0], [30.6, 15.0], [30.7, 15.0], [30.8, 15.0], [30.9, 15.0], [31.0, 15.0], [31.1, 15.0], [31.2, 15.0], [31.3, 15.0], [31.4, 15.0], [31.5, 15.0], [31.6, 15.0], [31.7, 16.0], [31.8, 16.0], [31.9, 16.0], [32.0, 16.0], [32.1, 16.0], [32.2, 16.0], [32.3, 16.0], [32.4, 16.0], [32.5, 16.0], [32.6, 16.0], [32.7, 16.0], [32.8, 16.0], [32.9, 16.0], [33.0, 16.0], [33.1, 16.0], [33.2, 16.0], [33.3, 16.0], [33.4, 16.0], [33.5, 16.0], [33.6, 16.0], [33.7, 16.0], [33.8, 16.0], [33.9, 16.0], [34.0, 16.0], [34.1, 16.0], [34.2, 16.0], [34.3, 16.0], [34.4, 16.0], [34.5, 16.0], [34.6, 16.0], [34.7, 16.0], [34.8, 16.0], [34.9, 16.0], [35.0, 16.0], [35.1, 16.0], [35.2, 16.0], [35.3, 16.0], [35.4, 16.0], [35.5, 17.0], [35.6, 17.0], [35.7, 17.0], [35.8, 17.0], [35.9, 17.0], [36.0, 17.0], [36.1, 17.0], [36.2, 17.0], [36.3, 17.0], [36.4, 17.0], [36.5, 17.0], [36.6, 17.0], [36.7, 17.0], [36.8, 17.0], [36.9, 17.0], [37.0, 17.0], [37.1, 17.0], [37.2, 17.0], [37.3, 17.0], [37.4, 17.0], [37.5, 17.0], [37.6, 17.0], [37.7, 17.0], [37.8, 17.0], [37.9, 17.0], [38.0, 17.0], [38.1, 17.0], [38.2, 17.0], [38.3, 17.0], [38.4, 17.0], [38.5, 17.0], [38.6, 17.0], [38.7, 17.0], [38.8, 17.0], [38.9, 17.0], [39.0, 17.0], [39.1, 18.0], [39.2, 18.0], [39.3, 18.0], [39.4, 18.0], [39.5, 18.0], [39.6, 18.0], [39.7, 18.0], [39.8, 18.0], [39.9, 18.0], [40.0, 18.0], [40.1, 18.0], [40.2, 18.0], [40.3, 18.0], [40.4, 18.0], [40.5, 18.0], [40.6, 18.0], [40.7, 18.0], [40.8, 18.0], [40.9, 18.0], [41.0, 18.0], [41.1, 18.0], [41.2, 18.0], [41.3, 18.0], [41.4, 18.0], [41.5, 18.0], [41.6, 18.0], [41.7, 18.0], [41.8, 18.0], [41.9, 18.0], [42.0, 18.0], [42.1, 18.0], [42.2, 18.0], [42.3, 18.0], [42.4, 18.0], [42.5, 19.0], [42.6, 19.0], [42.7, 19.0], [42.8, 19.0], [42.9, 19.0], [43.0, 19.0], [43.1, 19.0], [43.2, 19.0], [43.3, 19.0], [43.4, 19.0], [43.5, 19.0], [43.6, 19.0], [43.7, 19.0], [43.8, 19.0], [43.9, 19.0], [44.0, 19.0], [44.1, 19.0], [44.2, 19.0], [44.3, 19.0], [44.4, 19.0], [44.5, 19.0], [44.6, 19.0], [44.7, 19.0], [44.8, 19.0], [44.9, 19.0], [45.0, 19.0], [45.1, 19.0], [45.2, 19.0], [45.3, 19.0], [45.4, 19.0], [45.5, 19.0], [45.6, 19.0], [45.7, 19.0], [45.8, 20.0], [45.9, 20.0], [46.0, 20.0], [46.1, 20.0], [46.2, 20.0], [46.3, 20.0], [46.4, 20.0], [46.5, 20.0], [46.6, 20.0], [46.7, 20.0], [46.8, 20.0], [46.9, 20.0], [47.0, 20.0], [47.1, 20.0], [47.2, 20.0], [47.3, 20.0], [47.4, 20.0], [47.5, 20.0], [47.6, 20.0], [47.7, 20.0], [47.8, 20.0], [47.9, 20.0], [48.0, 20.0], [48.1, 20.0], [48.2, 20.0], [48.3, 20.0], [48.4, 20.0], [48.5, 20.0], [48.6, 20.0], [48.7, 20.0], [48.8, 20.0], [48.9, 21.0], [49.0, 21.0], [49.1, 21.0], [49.2, 21.0], [49.3, 21.0], [49.4, 21.0], [49.5, 21.0], [49.6, 21.0], [49.7, 21.0], [49.8, 21.0], [49.9, 21.0], [50.0, 21.0], [50.1, 21.0], [50.2, 21.0], [50.3, 21.0], [50.4, 21.0], [50.5, 21.0], [50.6, 21.0], [50.7, 21.0], [50.8, 21.0], [50.9, 21.0], [51.0, 21.0], [51.1, 21.0], [51.2, 21.0], [51.3, 21.0], [51.4, 21.0], [51.5, 21.0], [51.6, 21.0], [51.7, 21.0], [51.8, 22.0], [51.9, 22.0], [52.0, 22.0], [52.1, 22.0], [52.2, 22.0], [52.3, 22.0], [52.4, 22.0], [52.5, 22.0], [52.6, 22.0], [52.7, 22.0], [52.8, 22.0], [52.9, 22.0], [53.0, 22.0], [53.1, 22.0], [53.2, 22.0], [53.3, 22.0], [53.4, 22.0], [53.5, 22.0], [53.6, 22.0], [53.7, 22.0], [53.8, 22.0], [53.9, 22.0], [54.0, 22.0], [54.1, 22.0], [54.2, 22.0], [54.3, 22.0], [54.4, 22.0], [54.5, 23.0], [54.6, 23.0], [54.7, 23.0], [54.8, 23.0], [54.9, 23.0], [55.0, 23.0], [55.1, 23.0], [55.2, 23.0], [55.3, 23.0], [55.4, 23.0], [55.5, 23.0], [55.6, 23.0], [55.7, 23.0], [55.8, 23.0], [55.9, 23.0], [56.0, 23.0], [56.1, 23.0], [56.2, 23.0], [56.3, 23.0], [56.4, 23.0], [56.5, 23.0], [56.6, 23.0], [56.7, 23.0], [56.8, 23.0], [56.9, 23.0], [57.0, 23.0], [57.1, 24.0], [57.2, 24.0], [57.3, 24.0], [57.4, 24.0], [57.5, 24.0], [57.6, 24.0], [57.7, 24.0], [57.8, 24.0], [57.9, 24.0], [58.0, 24.0], [58.1, 24.0], [58.2, 24.0], [58.3, 24.0], [58.4, 24.0], [58.5, 24.0], [58.6, 24.0], [58.7, 24.0], [58.8, 24.0], [58.9, 24.0], [59.0, 24.0], [59.1, 24.0], [59.2, 24.0], [59.3, 24.0], [59.4, 25.0], [59.5, 25.0], [59.6, 25.0], [59.7, 25.0], [59.8, 25.0], [59.9, 25.0], [60.0, 25.0], [60.1, 25.0], [60.2, 25.0], [60.3, 25.0], [60.4, 25.0], [60.5, 25.0], [60.6, 25.0], [60.7, 25.0], [60.8, 25.0], [60.9, 25.0], [61.0, 25.0], [61.1, 25.0], [61.2, 25.0], [61.3, 25.0], [61.4, 25.0], [61.5, 25.0], [61.6, 26.0], [61.7, 26.0], [61.8, 26.0], [61.9, 26.0], [62.0, 26.0], [62.1, 26.0], [62.2, 26.0], [62.3, 26.0], [62.4, 26.0], [62.5, 26.0], [62.6, 26.0], [62.7, 26.0], [62.8, 26.0], [62.9, 26.0], [63.0, 26.0], [63.1, 26.0], [63.2, 26.0], [63.3, 26.0], [63.4, 26.0], [63.5, 26.0], [63.6, 27.0], [63.7, 27.0], [63.8, 27.0], [63.9, 27.0], [64.0, 27.0], [64.1, 27.0], [64.2, 27.0], [64.3, 27.0], [64.4, 27.0], [64.5, 27.0], [64.6, 27.0], [64.7, 27.0], [64.8, 27.0], [64.9, 27.0], [65.0, 27.0], [65.1, 27.0], [65.2, 27.0], [65.3, 27.0], [65.4, 28.0], [65.5, 28.0], [65.6, 28.0], [65.7, 28.0], [65.8, 28.0], [65.9, 28.0], [66.0, 28.0], [66.1, 28.0], [66.2, 28.0], [66.3, 28.0], [66.4, 28.0], [66.5, 28.0], [66.6, 28.0], [66.7, 28.0], [66.8, 28.0], [66.9, 28.0], [67.0, 28.0], [67.1, 29.0], [67.2, 29.0], [67.3, 29.0], [67.4, 29.0], [67.5, 29.0], [67.6, 29.0], [67.7, 29.0], [67.8, 29.0], [67.9, 29.0], [68.0, 29.0], [68.1, 29.0], [68.2, 29.0], [68.3, 29.0], [68.4, 29.0], [68.5, 29.0], [68.6, 30.0], [68.7, 30.0], [68.8, 30.0], [68.9, 30.0], [69.0, 30.0], [69.1, 30.0], [69.2, 30.0], [69.3, 30.0], [69.4, 30.0], [69.5, 30.0], [69.6, 30.0], [69.7, 30.0], [69.8, 30.0], [69.9, 30.0], [70.0, 31.0], [70.1, 31.0], [70.2, 31.0], [70.3, 31.0], [70.4, 31.0], [70.5, 31.0], [70.6, 31.0], [70.7, 31.0], [70.8, 31.0], [70.9, 31.0], [71.0, 31.0], [71.1, 31.0], [71.2, 31.0], [71.3, 32.0], [71.4, 32.0], [71.5, 32.0], [71.6, 32.0], [71.7, 32.0], [71.8, 32.0], [71.9, 32.0], [72.0, 32.0], [72.1, 32.0], [72.2, 32.0], [72.3, 32.0], [72.4, 32.0], [72.5, 32.0], [72.6, 33.0], [72.7, 33.0], [72.8, 33.0], [72.9, 33.0], [73.0, 33.0], [73.1, 33.0], [73.2, 33.0], [73.3, 33.0], [73.4, 33.0], [73.5, 33.0], [73.6, 34.0], [73.7, 34.0], [73.8, 34.0], [73.9, 34.0], [74.0, 34.0], [74.1, 34.0], [74.2, 34.0], [74.3, 34.0], [74.4, 34.0], [74.5, 34.0], [74.6, 35.0], [74.7, 35.0], [74.8, 35.0], [74.9, 35.0], [75.0, 35.0], [75.1, 35.0], [75.2, 35.0], [75.3, 35.0], [75.4, 35.0], [75.5, 36.0], [75.6, 36.0], [75.7, 36.0], [75.8, 36.0], [75.9, 36.0], [76.0, 36.0], [76.1, 36.0], [76.2, 36.0], [76.3, 37.0], [76.4, 37.0], [76.5, 37.0], [76.6, 37.0], [76.7, 37.0], [76.8, 37.0], [76.9, 37.0], [77.0, 38.0], [77.1, 38.0], [77.2, 38.0], [77.3, 38.0], [77.4, 38.0], [77.5, 38.0], [77.6, 38.0], [77.7, 39.0], [77.8, 39.0], [77.9, 39.0], [78.0, 39.0], [78.1, 39.0], [78.2, 39.0], [78.3, 40.0], [78.4, 40.0], [78.5, 40.0], [78.6, 40.0], [78.7, 40.0], [78.8, 40.0], [78.9, 41.0], [79.0, 41.0], [79.1, 41.0], [79.2, 41.0], [79.3, 41.0], [79.4, 42.0], [79.5, 42.0], [79.6, 42.0], [79.7, 42.0], [79.8, 42.0], [79.9, 43.0], [80.0, 43.0], [80.1, 43.0], [80.2, 43.0], [80.3, 44.0], [80.4, 44.0], [80.5, 44.0], [80.6, 44.0], [80.7, 45.0], [80.8, 45.0], [80.9, 45.0], [81.0, 45.0], [81.1, 46.0], [81.2, 46.0], [81.3, 46.0], [81.4, 47.0], [81.5, 47.0], [81.6, 47.0], [81.7, 47.0], [81.8, 48.0], [81.9, 48.0], [82.0, 48.0], [82.1, 49.0], [82.2, 49.0], [82.3, 49.0], [82.4, 50.0], [82.5, 50.0], [82.6, 51.0], [82.7, 51.0], [82.8, 51.0], [82.9, 52.0], [83.0, 52.0], [83.1, 53.0], [83.2, 53.0], [83.3, 54.0], [83.4, 54.0], [83.5, 55.0], [83.6, 55.0], [83.7, 56.0], [83.8, 56.0], [83.9, 57.0], [84.0, 58.0], [84.1, 58.0], [84.2, 59.0], [84.3, 59.0], [84.4, 60.0], [84.5, 61.0], [84.6, 61.0], [84.7, 62.0], [84.8, 63.0], [84.9, 63.0], [85.0, 64.0], [85.1, 65.0], [85.2, 66.0], [85.3, 66.0], [85.4, 67.0], [85.5, 68.0], [85.6, 69.0], [85.7, 70.0], [85.8, 71.0], [85.9, 72.0], [86.0, 72.0], [86.1, 74.0], [86.2, 75.0], [86.3, 76.0], [86.4, 77.0], [86.5, 78.0], [86.6, 79.0], [86.7, 80.0], [86.8, 82.0], [86.9, 83.0], [87.0, 84.0], [87.1, 86.0], [87.2, 87.0], [87.3, 88.0], [87.4, 90.0], [87.5, 92.0], [87.6, 93.0], [87.7, 95.0], [87.8, 97.0], [87.9, 98.0], [88.0, 100.0], [88.1, 102.0], [88.2, 104.0], [88.3, 106.0], [88.4, 108.0], [88.5, 110.0], [88.6, 112.0], [88.7, 114.0], [88.8, 117.0], [88.9, 119.0], [89.0, 121.0], [89.1, 124.0], [89.2, 126.0], [89.3, 129.0], [89.4, 131.0], [89.5, 134.0], [89.6, 137.0], [89.7, 140.0], [89.8, 143.0], [89.9, 146.0], [90.0, 150.0], [90.1, 153.0], [90.2, 157.0], [90.3, 161.0], [90.4, 166.0], [90.5, 171.0], [90.6, 175.0], [90.7, 181.0], [90.8, 187.0], [90.9, 193.0], [91.0, 200.0], [91.1, 207.0], [91.2, 214.0], [91.3, 221.0], [91.4, 229.0], [91.5, 240.0], [91.6, 255.0], [91.7, 277.0], [91.8, 314.0], [91.9, 399.0], [92.0, 1011.0], [92.1, 1014.0], [92.2, 1016.0], [92.3, 1017.0], [92.4, 1019.0], [92.5, 1020.0], [92.6, 1021.0], [92.7, 1022.0], [92.8, 1023.0], [92.9, 1024.0], [93.0, 1025.0], [93.1, 1026.0], [93.2, 1027.0], [93.3, 1027.0], [93.4, 1028.0], [93.5, 1029.0], [93.6, 1030.0], [93.7, 1030.0], [93.8, 1031.0], [93.9, 1032.0], [94.0, 1032.0], [94.1, 1033.0], [94.2, 1034.0], [94.3, 1034.0], [94.4, 1035.0], [94.5, 1035.0], [94.6, 1036.0], [94.7, 1037.0], [94.8, 1037.0], [94.9, 1038.0], [95.0, 1038.0], [95.1, 1039.0], [95.2, 1040.0], [95.3, 1040.0], [95.4, 1041.0], [95.5, 1041.0], [95.6, 1042.0], [95.7, 1042.0], [95.8, 1043.0], [95.9, 1044.0], [96.0, 1044.0], [96.1, 1045.0], [96.2, 1045.0], [96.3, 1046.0], [96.4, 1047.0], [96.5, 1047.0], [96.6, 1048.0], [96.7, 1049.0], [96.8, 1049.0], [96.9, 1050.0], [97.0, 1051.0], [97.1, 1052.0], [97.2, 1053.0], [97.3, 1054.0], [97.4, 1055.0], [97.5, 1056.0], [97.6, 1057.0], [97.7, 1058.0], [97.8, 1060.0], [97.9, 1061.0], [98.0, 1063.0], [98.1, 1065.0], [98.2, 1067.0], [98.3, 1069.0], [98.4, 1072.0], [98.5, 1076.0], [98.6, 1081.0], [98.7, 1088.0], [98.8, 1099.0], [98.9, 1127.0], [99.0, 1226.0], [99.1, 1243.0], [99.2, 1263.0], [99.3, 1315.0], [99.4, 2048.0], [99.5, 2064.0], [99.6, 2091.0], [99.7, 3041.0], [99.8, 3056.0], [99.9, 3077.0], [100.0, 8418.0]], "isOverall": false, "label": "go", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 1090725.0, "series": [{"data": [[0.0, 1090725.0], [8200.0, 11.0], [8400.0, 21.0], [1000.0, 85229.0], [1100.0, 2138.0], [1200.0, 3951.0], [1300.0, 475.0], [1400.0, 214.0], [1500.0, 74.0], [100.0, 37478.0], [1600.0, 20.0], [1800.0, 36.0], [1900.0, 3.0], [2000.0, 3120.0], [2100.0, 287.0], [2200.0, 298.0], [2300.0, 20.0], [2400.0, 6.0], [3000.0, 3318.0], [3100.0, 77.0], [200.0, 9582.0], [3200.0, 89.0], [3300.0, 13.0], [4000.0, 273.0], [4100.0, 36.0], [4200.0, 37.0], [4300.0, 9.0], [4400.0, 3.0], [300.0, 1683.0], [400.0, 318.0], [7100.0, 55.0], [7200.0, 77.0], [7300.0, 104.0], [7400.0, 111.0], [500.0, 3.0]], "isOverall": false, "label": "go", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8098.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1139786.0, "series": [{"data": [[0.0, 1139786.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 92010.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8098.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 657.041972753691, "minX": 1.60950552E12, "maxY": 900.0, "series": [{"data": [[1.60950564E12, 900.0], [1.60950558E12, 900.0], [1.6095057E12, 898.5723273218557], [1.60950552E12, 657.041972753691]], "isOverall": false, "label": "go", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6095057E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.0, "maxY": 1555.0, "series": [{"data": [[2.0, 0.5333333333333334], [3.0, 0.5686274509803922], [4.0, 0.5555555555555557], [5.0, 245.0843373493976], [6.0, 0.6933333333333334], [7.0, 78.20238095238095], [8.0, 14.021505376344084], [9.0, 0.8571428571428572], [10.0, 0.9714285714285713], [11.0, 0.9181818181818183], [12.0, 1.2211538461538463], [13.0, 1.2201834862385323], [14.0, 1.045045045045045], [15.0, 1.4128440366972477], [16.0, 193.26190476190476], [17.0, 12.238938053097344], [18.0, 1.5634920634920633], [19.0, 1.7565217391304346], [20.0, 1.8189655172413794], [21.0, 1.8220338983050848], [22.0, 1.834862385321101], [23.0, 2.184615384615384], [24.0, 2.01639344262295], [25.0, 1.861386138613862], [26.0, 2.3771929824561417], [27.0, 2.766990291262137], [28.0, 2.6909090909090905], [29.0, 2.6842105263157894], [30.0, 2.8740157480314963], [31.0, 63.84], [32.0, 31.314814814814817], [33.0, 52.68032786885246], [34.0, 27.33064516129032], [35.0, 83.18421052631578], [36.0, 53.45833333333333], [37.0, 58.55855855855856], [38.0, 3.3396226415094348], [39.0, 51.3671875], [40.0, 3.48062015503876], [41.0, 259.6448598130841], [42.0, 3.7925925925925936], [43.0, 3.4113475177304964], [44.0, 28.34426229508197], [45.0, 3.3402777777777786], [46.0, 74.71929824561404], [47.0, 3.4228571428571435], [48.0, 3.694444444444444], [49.0, 4.790476190476191], [50.0, 3.620111731843575], [51.0, 3.5772357723577235], [52.0, 3.9062500000000004], [53.0, 4.450819672131147], [54.0, 3.718232044198896], [55.0, 4.008130081300815], [56.0, 4.6142857142857165], [57.0, 4.295857988165682], [58.0, 4.3965517241379315], [59.0, 4.677419354838709], [60.0, 4.444444444444442], [61.0, 4.711409395973153], [62.0, 4.68965517241379], [63.0, 5.134328358208955], [64.0, 4.776119402985075], [65.0, 4.9276315789473655], [66.0, 5.267716535433071], [67.0, 5.170370370370373], [68.0, 5.132450331125828], [69.0, 5.679775280898874], [70.0, 5.134228187919465], [71.0, 5.0874999999999995], [72.0, 5.090225563909774], [73.0, 6.503703703703706], [74.0, 6.2260273972602755], [75.0, 5.915254237288137], [76.0, 6.3357142857142845], [77.0, 5.570370370370374], [78.0, 5.933333333333334], [79.0, 6.041666666666664], [80.0, 8.787401574803148], [81.0, 6.568047337278102], [82.0, 6.372881355932202], [83.0, 6.9349593495934965], [84.0, 7.438016528925618], [85.0, 6.7522123893805315], [86.0, 8.642857142857142], [87.0, 10.85], [88.0, 11.219178082191783], [89.0, 7.673076923076925], [90.0, 7.151079136690645], [91.0, 5.713178294573643], [92.0, 6.710344827586208], [93.0, 8.912087912087912], [94.0, 8.406504065040641], [95.0, 31.0], [96.0, 17.742857142857137], [97.0, 11.027586206896553], [98.0, 16.842105263157897], [99.0, 23.268907563025206], [100.0, 7.535911602209948], [101.0, 7.136363636363636], [102.0, 8.464285714285714], [103.0, 8.457516339869278], [104.0, 7.842857142857143], [105.0, 9.126315789473688], [106.0, 8.743902439024394], [107.0, 15.229508196721312], [108.0, 10.207920792079204], [109.0, 8.459259259259259], [110.0, 26.31666666666667], [111.0, 10.736434108527133], [112.0, 28.074380165289263], [113.0, 19.373983739837392], [114.0, 21.34653465346534], [115.0, 29.08196721311475], [116.0, 14.336538461538463], [117.0, 25.975609756097555], [118.0, 65.25000000000001], [119.0, 33.36507936507936], [120.0, 38.11111111111111], [121.0, 52.82142857142858], [122.0, 185.82222222222222], [123.0, 141.74285714285713], [124.0, 33.482758620689644], [125.0, 373.5], [126.0, 58.09090909090909], [127.0, 289.6153846153846], [128.0, 176.22222222222223], [129.0, 270.2], [130.0, 89.875], [131.0, 72.33333333333333], [132.0, 370.81818181818187], [133.0, 87.77777777777777], [134.0, 87.50000000000001], [135.0, 282.2], [136.0, 231.0], [137.0, 114.8], [138.0, 144.0], [139.0, 320.2173913043478], [140.0, 127.75], [141.0, 120.36363636363637], [142.0, 93.00000000000001], [143.0, 517.6666666666667], [144.0, 274.875], [145.0, 314.75], [146.0, 155.8], [147.0, 114.2], [148.0, 351.30769230769226], [149.0, 198.0357142857143], [150.0, 106.18750000000001], [151.0, 40.37096774193549], [152.0, 21.741379310344833], [153.0, 30.398550724637683], [154.0, 26.789473684210524], [155.0, 28.31914893617021], [156.0, 37.77586206896551], [157.0, 21.17808219178082], [158.0, 21.432203389830512], [159.0, 12.666666666666668], [160.0, 18.59124087591241], [161.0, 18.804347826086957], [162.0, 17.457516339869283], [163.0, 11.974576271186441], [164.0, 41.56028368794326], [165.0, 12.614864864864868], [166.0, 40.93939393939394], [167.0, 41.23703703703704], [168.0, 12.144144144144143], [169.0, 61.08461538461538], [170.0, 34.506024096385545], [171.0, 48.92857142857143], [172.0, 10.082474226804127], [173.0, 45.52136752136752], [174.0, 72.85840707964603], [175.0, 25.592920353982297], [176.0, 40.74100719424461], [177.0, 55.516129032258064], [178.0, 31.643750000000004], [179.0, 11.660194174757281], [180.0, 35.22289156626507], [181.0, 26.653225806451616], [182.0, 9.5076923076923], [183.0, 80.30281690140845], [184.0, 19.418604651162795], [185.0, 11.953642384105963], [186.0, 10.315315315315315], [187.0, 13.03076923076923], [188.0, 10.969325153374232], [189.0, 11.13157894736842], [190.0, 10.41121495327103], [191.0, 13.462962962962962], [192.0, 13.026315789473681], [193.0, 13.479674796747968], [194.0, 29.524590163934427], [195.0, 14.7816091954023], [196.0, 15.268656716417906], [197.0, 10.319999999999999], [198.0, 29.367021276595757], [199.0, 2.966666666666667], [200.0, 20.272727272727273], [201.0, 8.615384615384615], [202.0, 52.45], [203.0, 50.08571428571429], [204.0, 80.75], [205.0, 34.64999999999999], [206.0, 84.02631578947368], [207.0, 33.97619047619048], [208.0, 82.66666666666666], [209.0, 110.125], [210.0, 390.65000000000003], [211.0, 64.9], [212.0, 306.61538461538464], [213.0, 134.73333333333335], [214.0, 84.22222222222223], [215.0, 100.94117647058822], [216.0, 91.00000000000001], [217.0, 359.3636363636363], [218.0, 140.66666666666666], [219.0, 130.0238095238095], [220.0, 456.6666666666667], [221.0, 353.25], [222.0, 188.85714285714286], [223.0, 593.25], [224.0, 172.44444444444443], [225.0, 194.0], [226.0, 207.2], [227.0, 149.0], [228.0, 800.875], [229.0, 298.6666666666667], [230.0, 174.40000000000003], [231.0, 237.66666666666666], [232.0, 320.61538461538464], [233.0, 215.0434782608696], [234.0, 485.5], [235.0, 239.33333333333331], [236.0, 181.14285714285714], [237.0, 641.625], [238.0, 217.21212121212122], [239.0, 121.64583333333336], [240.0, 76.05128205128206], [241.0, 43.25510204081632], [242.0, 25.238095238095237], [243.0, 24.3375], [244.0, 23.238709677419365], [245.0, 20.204545454545453], [246.0, 27.900826446281002], [247.0, 31.418300653594766], [248.0, 64.59259259259262], [249.0, 175.4772727272727], [250.0, 20.037037037037038], [254.0, 112.7113402061856], [255.0, 7.661538461538462], [253.0, 47.29629629629629], [252.0, 38.70588235294117], [257.0, 11.468085106382976], [256.0, 11.750000000000004], [258.0, 14.843750000000002], [259.0, 19.259259259259252], [260.0, 40.940740740740765], [261.0, 15.115044247787608], [262.0, 14.880281690140846], [263.0, 13.34146341463414], [264.0, 13.734848484848488], [270.0, 12.62244897959183], [271.0, 14.357142857142858], [268.0, 25.479338842975217], [269.0, 39.27333333333334], [265.0, 11.15625], [266.0, 13.29801324503311], [267.0, 14.15789473684211], [273.0, 10.784172661870507], [272.0, 19.77551020408163], [274.0, 31.5923566878981], [275.0, 62.65693430656934], [276.0, 13.264367816091955], [277.0, 52.4], [278.0, 13.484848484848486], [279.0, 27.0], [280.0, 11.749999999999998], [286.0, 88.85542168674698], [287.0, 18.71774193548388], [284.0, 23.500000000000004], [285.0, 10.877192982456139], [281.0, 21.100775193798448], [282.0, 20.55900621118012], [283.0, 38.44047619047619], [289.0, 17.173913043478265], [288.0, 16.110344827586207], [290.0, 32.62096774193548], [291.0, 12.064220183486238], [292.0, 39.294871794871796], [293.0, 18.386363636363637], [294.0, 17.608695652173918], [295.0, 63.95454545454546], [296.0, 30.704918032786885], [302.0, 87.62745098039215], [303.0, 113.96153846153845], [300.0, 23.411764705882344], [301.0, 37.139534883720934], [297.0, 18.961538461538453], [298.0, 34.33636363636364], [299.0, 58.54347826086956], [305.0, 45.77777777777777], [304.0, 86.52083333333333], [306.0, 113.1764705882353], [307.0, 166.05714285714285], [308.0, 227.58333333333331], [309.0, 172.88888888888886], [310.0, 83.81249999999999], [311.0, 373.2], [312.0, 98.33333333333333], [318.0, 524.2727272727273], [319.0, 209.44444444444446], [316.0, 107.57894736842105], [317.0, 635.5714285714286], [313.0, 207.375], [314.0, 282.0], [315.0, 130.4], [321.0, 370.3333333333333], [320.0, 145.0], [322.0, 451.0], [323.0, 168.5], [324.0, 611.75], [325.0, 110.0], [326.0, 400.22222222222223], [327.0, 195.19999999999996], [328.0, 75.33333333333331], [334.0, 43.14705882352942], [335.0, 28.324074074074076], [332.0, 32.56626506024096], [333.0, 29.096774193548388], [329.0, 43.5392156862745], [330.0, 28.96491228070176], [331.0, 36.64999999999999], [337.0, 40.61290322580645], [336.0, 21.08227848101266], [338.0, 33.17687074829932], [339.0, 341.1753246753245], [340.0, 30.054794520547947], [341.0, 39.726027397260275], [342.0, 17.466666666666665], [343.0, 29.13483146067415], [344.0, 31.858333333333324], [350.0, 163.20183486238534], [351.0, 131.8536585365853], [348.0, 28.94029850746269], [349.0, 27.059523809523807], [345.0, 39.766666666666666], [346.0, 82.578125], [347.0, 34.615384615384606], [353.0, 24.488888888888887], [352.0, 90.60919540229887], [354.0, 41.176470588235304], [355.0, 27.716763005780336], [356.0, 17.9047619047619], [357.0, 18.353741496598634], [358.0, 31.793650793650798], [359.0, 15.883116883116895], [360.0, 17.90677966101694], [366.0, 15.402515723270444], [367.0, 19.633333333333333], [364.0, 22.84263959390863], [365.0, 13.884615384615387], [361.0, 18.104895104895103], [362.0, 415.23199999999997], [363.0, 37.10416666666666], [369.0, 14.371428571428574], [368.0, 14.41666666666667], [370.0, 17.078048780487805], [371.0, 41.15384615384616], [372.0, 11.315789473684212], [373.0, 1045.0], [374.0, 12.785714285714285], [375.0, 25.111111111111107], [376.0, 21.978102189781023], [382.0, 33.537878787878796], [383.0, 155.03030303030306], [380.0, 42.83157894736842], [381.0, 19.11016949152542], [377.0, 134.36912751677858], [378.0, 18.603174603174605], [379.0, 57.77586206896551], [385.0, 48.60919540229886], [384.0, 32.3896103896104], [386.0, 45.873786407766985], [387.0, 29.23611111111111], [388.0, 44.515625], [389.0, 16.92957746478873], [390.0, 20.16438356164383], [391.0, 48.9], [392.0, 31.08695652173914], [398.0, 99.42857142857143], [399.0, 61.333333333333336], [396.0, 36.25000000000001], [397.0, 49.0], [393.0, 48.33333333333334], [394.0, 58.54545454545454], [395.0, 29.129032258064516], [401.0, 78.6923076923077], [400.0, 112.83333333333331], [402.0, 135.27272727272725], [403.0, 658.3000000000001], [404.0, 170.0769230769231], [405.0, 131.25], [406.0, 211.1818181818182], [407.0, 527.1428571428571], [408.0, 351.75], [414.0, 135.30120481927716], [415.0, 78.70078740157479], [412.0, 172.33333333333334], [413.0, 128.9], [409.0, 301.5], [410.0, 331.0], [411.0, 123.85714285714286], [417.0, 32.55223880597015], [416.0, 38.5], [418.0, 21.818840579710145], [419.0, 14.758865248226952], [420.0, 13.194915254237287], [421.0, 16.4056603773585], [422.0, 16.986111111111107], [423.0, 22.431372549019613], [424.0, 16.35828877005348], [430.0, 24.573248407643312], [431.0, 19.857142857142854], [428.0, 51.510067114093964], [429.0, 36.11392405063292], [425.0, 19.325153374233135], [426.0, 179.72222222222223], [427.0, 90.37500000000001], [433.0, 19.647058823529406], [432.0, 33.026737967914436], [434.0, 28.412587412587413], [435.0, 27.023255813953483], [436.0, 290.82967032967036], [437.0, 291.94949494949486], [438.0, 41.620689655172406], [439.0, 21.384105960264908], [440.0, 20.006756756756754], [446.0, 14.824074074074073], [447.0, 14.906666666666666], [444.0, 103.53571428571433], [445.0, 14.410714285714286], [441.0, 16.500000000000004], [442.0, 21.703703703703702], [443.0, 18.742690058479525], [449.0, 55.90728476821194], [448.0, 135.89830508474577], [450.0, 26.44642857142857], [451.0, 12.456140350877194], [452.0, 17.699346405228766], [453.0, 80.72440944881889], [454.0, 322.17391304347825], [455.0, 55.21052631578949], [456.0, 278.66315789473686], [462.0, 17.228571428571428], [463.0, 13.963855421686747], [460.0, 41.76530612244898], [461.0, 64.2406015037594], [457.0, 103.3526315789474], [458.0, 18.978260869565222], [459.0, 22.64864864864865], [465.0, 20.873949579831944], [464.0, 15.696629213483144], [466.0, 21.701754385964918], [467.0, 32.68421052631579], [468.0, 48.12222222222222], [469.0, 23.0], [470.0, 20.057142857142864], [471.0, 29.400000000000002], [472.0, 60.87878787878789], [478.0, 201.0], [479.0, 171.73684210526318], [476.0, 633.4999999999999], [477.0, 340.3333333333333], [473.0, 345.1041666666667], [474.0, 334.6470588235294], [475.0, 550.2500000000001], [481.0, 107.77777777777777], [480.0, 88.28571428571429], [482.0, 158.73913043478262], [483.0, 99.76470588235294], [484.0, 125.12500000000001], [485.0, 98.25], [486.0, 180.0], [487.0, 116.125], [488.0, 124.22222222222223], [494.0, 180.0], [495.0, 257.5], [492.0, 170.66666666666669], [493.0, 143.16666666666666], [489.0, 168.125], [490.0, 149.0], [491.0, 177.85714285714283], [497.0, 246.9], [496.0, 255.24999999999997], [498.0, 216.33333333333334], [499.0, 227.0], [500.0, 320.42857142857144], [501.0, 210.36], [502.0, 171.76056338028164], [503.0, 58.283783783783775], [504.0, 211.7902097902098], [510.0, 13.166666666666671], [511.0, 16.33749999999999], [508.0, 22.409395973154357], [509.0, 35.49019607843138], [505.0, 39.10588235294118], [506.0, 37.846153846153854], [507.0, 12.849999999999996], [517.0, 50.57894736842102], [513.0, 32.19083969465648], [512.0, 15.412698412698418], [526.0, 20.644859813084103], [527.0, 88.863309352518], [524.0, 19.209876543209884], [525.0, 41.43749999999999], [522.0, 23.240875912408757], [523.0, 23.460317460317466], [514.0, 34.60902255639099], [515.0, 643.2666666666665], [516.0, 213.22012578616355], [519.0, 54.199999999999996], [518.0, 1041.0], [536.0, 11.425149700598801], [537.0, 22.533333333333335], [538.0, 173.55921052631578], [539.0, 41.44966442953021], [540.0, 57.47133757961784], [541.0, 85.68503937007874], [542.0, 11.55357142857143], [543.0, 14.999999999999998], [528.0, 25.54716981132075], [529.0, 23.554347826086953], [530.0, 27.397515527950304], [531.0, 56.708860759493675], [532.0, 371.78125], [533.0, 129.30281690140845], [534.0, 27.914285714285715], [535.0, 16.064220183486242], [520.0, 273.77777777777777], [521.0, 19.748466257668724], [547.0, 16.11111111111111], [544.0, 57.95774647887325], [558.0, 21.66129032258064], [559.0, 25.819672131147545], [556.0, 19.708333333333336], [557.0, 35.663043478260875], [554.0, 58.95890410958905], [555.0, 32.03846153846154], [545.0, 14.204724409448826], [546.0, 22.090909090909086], [548.0, 13.460937500000002], [549.0, 159.37373737373744], [550.0, 446.22695035461], [551.0, 122.83453237410072], [560.0, 77.02173913043478], [574.0, 114.75000000000001], [575.0, 95.0], [572.0, 227.5483870967742], [573.0, 382.0], [570.0, 256.3333333333333], [571.0, 89.28571428571429], [568.0, 194.08333333333337], [569.0, 74.22222222222223], [561.0, 29.94520547945205], [562.0, 45.111111111111114], [563.0, 68.54285714285713], [564.0, 96.63157894736841], [565.0, 43.19444444444445], [566.0, 54.33333333333334], [567.0, 67.27777777777779], [552.0, 90.53333333333333], [553.0, 23.724137931034484], [579.0, 156.89999999999998], [576.0, 392.35714285714283], [590.0, 134.22000000000003], [591.0, 204.77380952380955], [588.0, 326.2222222222223], [589.0, 266.84], [586.0, 269.75], [587.0, 641.0], [577.0, 271.6], [578.0, 448.77777777777777], [580.0, 377.0], [581.0, 248.125], [582.0, 276.2857142857143], [583.0, 116.25], [592.0, 168.30000000000007], [606.0, 196.51298701298708], [607.0, 23.428571428571423], [604.0, 24.799999999999997], [605.0, 27.621428571428567], [602.0, 42.47486033519552], [603.0, 22.546875], [600.0, 23.104838709677406], [601.0, 49.68571428571428], [593.0, 26.810810810810814], [594.0, 114.54054054054055], [595.0, 101.01463414634144], [596.0, 76.15068493150683], [597.0, 38.9027027027027], [598.0, 107.625], [599.0, 31.64077669902912], [584.0, 257.25], [585.0, 623.5], [611.0, 18.42857142857143], [608.0, 8.374999999999998], [622.0, 381.877551020408], [623.0, 375.9150943396226], [620.0, 81.59354838709676], [621.0, 21.722222222222218], [618.0, 22.521367521367516], [619.0, 126.83941605839415], [609.0, 13.38202247191011], [610.0, 10.875], [612.0, 31.21212121212121], [613.0, 29.913793103448274], [614.0, 11.059701492537311], [615.0, 24.33742331288343], [624.0, 62.078260869565185], [639.0, 42.05357142857143], [637.0, 68.84347826086955], [638.0, 11.953703703703702], [634.0, 870.3333333333333], [636.0, 89.60606060606061], [632.0, 97.04], [633.0, 1555.0], [625.0, 185.97826086956516], [626.0, 42.5483870967742], [627.0, 28.58235294117647], [628.0, 65.97520661157023], [629.0, 34.818181818181834], [630.0, 163.98726114649676], [631.0, 30.047945205479458], [616.0, 55.04819277108434], [617.0, 57.18840579710145], [643.0, 60.96078431372549], [640.0, 44.73553719008265], [654.0, 133.8], [655.0, 76.33333333333333], [652.0, 87.82857142857142], [653.0, 99.35714285714286], [650.0, 48.04999999999999], [651.0, 72.78125], [641.0, 1037.0517241379307], [642.0, 248.56521739130426], [644.0, 82.74025974025972], [645.0, 88.35], [646.0, 58.62962962962963], [647.0, 55.58108108108107], [656.0, 584.5], [670.0, 226.6], [671.0, 206.92307692307693], [668.0, 403.75], [669.0, 405.11111111111114], [666.0, 184.5], [667.0, 198.11111111111111], [664.0, 388.33333333333337], [665.0, 293.0], [657.0, 93.0], [658.0, 269.04], [659.0, 530.0], [660.0, 133.66666666666666], [661.0, 267.3571428571429], [662.0, 148.7], [663.0, 162.25], [648.0, 58.38554216867471], [649.0, 201.4423076923077], [675.0, 306.75], [672.0, 578.3333333333334], [686.0, 45.116504854368934], [687.0, 76.06666666666666], [684.0, 15.426470588235293], [685.0, 30.05128205128205], [682.0, 90.92857142857144], [683.0, 15.159340659340652], [673.0, 241.73333333333332], [674.0, 471.3333333333333], [676.0, 238.89393939393943], [677.0, 188.81553398058253], [678.0, 118.36842105263162], [679.0, 54.81249999999999], [688.0, 236.15686274509804], [702.0, 12.499999999999998], [703.0, 13.346938775510203], [700.0, 14.025641025641024], [701.0, 18.89147286821705], [698.0, 18.82110091743119], [699.0, 28.709219858156033], [696.0, 25.306930693069305], [697.0, 19.433333333333323], [689.0, 221.6831683168316], [690.0, 30.58461538461539], [691.0, 286.4215686274507], [692.0, 206.25735294117646], [693.0, 115.4567901234568], [694.0, 576.5882352941176], [695.0, 280.10465116279084], [680.0, 60.3859649122807], [681.0, 37.01190476190476], [707.0, 70.68367346938776], [704.0, 13.510344827586202], [718.0, 26.752212389380535], [719.0, 33.016129032258064], [716.0, 564.5963855421688], [717.0, 19.049999999999997], [714.0, 274.20805369127504], [715.0, 21.44117647058823], [705.0, 11.704545454545455], [706.0, 11.798165137614678], [708.0, 15.064748201438853], [709.0, 13.068627450980399], [710.0, 136.304347826087], [711.0, 30.650793650793656], [720.0, 28.39130434782608], [734.0, 35.553191489361694], [735.0, 169.05333333333334], [732.0, 30.776119402985078], [733.0, 42.400000000000006], [730.0, 22.499999999999996], [731.0, 17.04411764705883], [728.0, 14.260869565217389], [729.0, 16.999999999999993], [721.0, 22.57731958762887], [722.0, 22.369369369369366], [723.0, 17.79166666666667], [724.0, 20.237113402061855], [725.0, 23.51612903225806], [726.0, 22.11594202898551], [727.0, 22.53781512605042], [712.0, 20.069148936170222], [713.0, 535.85593220339], [739.0, 50.63636363636364], [736.0, 32.285714285714285], [750.0, 124.41666666666669], [751.0, 107.9090909090909], [748.0, 117.9090909090909], [749.0, 103.25], [746.0, 88.94444444444444], [747.0, 90.5], [737.0, 30.16666666666667], [738.0, 39.82352941176471], [740.0, 54.21428571428572], [741.0, 70.5], [742.0, 84.57142857142857], [743.0, 87.75], [752.0, 116.42857142857143], [766.0, 117.56209150326794], [767.0, 297.3846153846154], [764.0, 43.25179856115106], [765.0, 25.51086956521739], [762.0, 181.81481481481487], [763.0, 107.37037037037032], [760.0, 160.87500000000003], [761.0, 198.0], [753.0, 150.0], [754.0, 153.0], [755.0, 145.00000000000003], [756.0, 150.5], [757.0, 166.66666666666666], [758.0, 160.77777777777777], [759.0, 160.83333333333334], [744.0, 94.94444444444444], [745.0, 98.7], [771.0, 18.393617021276594], [768.0, 216.79661016949154], [782.0, 216.3112582781458], [783.0, 14.0], [780.0, 15.362962962962962], [781.0, 15.927631578947379], [778.0, 48.00675675675675], [779.0, 14.289156626506022], [769.0, 495.94736842105283], [770.0, 54.46428571428572], [772.0, 19.65248226950355], [773.0, 18.29015544041451], [774.0, 12.593220338983052], [775.0, 13.658536585365852], [784.0, 76.00000000000004], [798.0, 12.841121495327105], [799.0, 189.3853658536586], [796.0, 12.46153846153846], [797.0, 15.286624203821649], [794.0, 86.47085201793719], [795.0, 17.484615384615378], [792.0, 26.333333333333332], [793.0, 33.99137931034482], [785.0, 415.25624999999997], [786.0, 257.87719298245605], [787.0, 16.9646017699115], [788.0, 18.021052631578936], [789.0, 245.86486486486487], [790.0, 118.21568627450982], [791.0, 50.1904761904762], [776.0, 11.906779661016948], [777.0, 256.10169491525414], [803.0, 14.340579710144931], [800.0, 13.680327868852462], [814.0, 176.25899280575535], [815.0, 24.023529411764713], [812.0, 35.77142857142857], [813.0, 203.4475524475523], [810.0, 167.2905982905982], [811.0, 28.00833333333333], [801.0, 15.34782608695652], [802.0, 17.349397590361452], [804.0, 16.575], [805.0, 26.30434782608696], [806.0, 16.101265822784818], [807.0, 602.0258620689658], [816.0, 32.46153846153846], [830.0, 110.55555555555556], [831.0, 129.09090909090907], [828.0, 102.80000000000001], [829.0, 106.17647058823529], [826.0, 147.94000000000003], [827.0, 87.59259259259261], [824.0, 421.3666666666667], [825.0, 328.79999999999995], [817.0, 24.0], [818.0, 33.525423728813564], [819.0, 29.402777777777782], [820.0, 35.3103448275862], [821.0, 42.87096774193548], [822.0, 64.06122448979593], [823.0, 59.8125], [808.0, 32.90217391304347], [809.0, 84.41984732824426], [835.0, 152.33333333333334], [832.0, 105.5], [846.0, 113.54098360655739], [847.0, 62.050724637681135], [844.0, 122.14473684210527], [845.0, 156.5], [842.0, 139.6], [843.0, 118.46153846153847], [833.0, 165.33333333333334], [834.0, 123.89999999999999], [836.0, 175.33333333333334], [837.0, 46.714285714285715], [838.0, 167.10000000000002], [839.0, 158.0], [848.0, 61.04], [849.0, 22.571428571428573], [862.0, 214.44444444444443], [863.0, 100.43884892086332], [860.0, 34.224852071005905], [861.0, 16.03636363636364], [858.0, 218.14024390243912], [859.0, 290.7321428571428], [856.0, 270.65624999999994], [857.0, 517.0963855421683], [850.0, 100.58579881656809], [851.0, 40.80392156862745], [852.0, 103.14814814814814], [853.0, 55.111111111111114], [854.0, 84.51578947368422], [855.0, 27.49358974358975], [840.0, 172.4], [841.0, 241.33333333333334], [867.0, 19.234285714285708], [864.0, 181.43452380952397], [878.0, 27.691358024691358], [879.0, 17.296610169491522], [876.0, 15.95588235294117], [877.0, 73.53333333333335], [874.0, 17.214285714285708], [875.0, 14.350000000000005], [865.0, 60.44444444444445], [866.0, 18.553333333333345], [868.0, 24.0], [869.0, 35.5732484076433], [870.0, 68.70769230769228], [871.0, 22.46534653465348], [880.0, 171.8024691358025], [894.0, 373.78640776699035], [895.0, 17.936842105263157], [892.0, 20.863013698630134], [893.0, 18.93103448275862], [890.0, 18.16923076923076], [891.0, 35.84946236559139], [888.0, 301.4301075268817], [889.0, 201.46268656716427], [881.0, 355.9882352941176], [882.0, 376.1293103448277], [883.0, 114.53488372093034], [884.0, 21.807692307692307], [885.0, 36.02083333333333], [886.0, 51.3835616438356], [887.0, 26.23076923076923], [872.0, 12.623655913978494], [873.0, 16.34285714285714], [896.0, 27.054794520547958], [897.0, 197.94545454545457], [898.0, 232.76363636363632], [899.0, 591.1720430107529], [900.0, 127.37689885668458], [1.0, 0.5]], "isOverall": false, "label": "go", "isController": false}, {"data": [[871.0925280709732, 123.54952681438722]], "isOverall": false, "label": "go-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 900.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 313745.2, "minX": 1.60950552E12, "maxY": 945702.5, "series": [{"data": [[1.60950564E12, 884026.25], [1.60950558E12, 883959.6], [1.6095057E12, 584041.05], [1.60950552E12, 313745.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60950564E12, 945702.5], [1.60950558E12, 945631.2], [1.6095057E12, 624788.1], [1.60950552E12, 335634.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6095057E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 88.84805520530631, "minX": 1.60950552E12, "maxY": 130.15136555897985, "series": [{"data": [[1.60950564E12, 127.11547637867118], [1.60950558E12, 127.93805576634483], [1.6095057E12, 130.15136555897985], [1.60950552E12, 88.84805520530631]], "isOverall": false, "label": "go", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6095057E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 88.84373115509018, "minX": 1.60950552E12, "maxY": 130.1428655571368, "series": [{"data": [[1.60950564E12, 127.1095081169809], [1.60950558E12, 127.93169789659918], [1.6095057E12, 130.1428655571368], [1.60950552E12, 88.84373115509018]], "isOverall": false, "label": "go", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6095057E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 23.447179430952257, "minX": 1.60950552E12, "maxY": 44.097737136798294, "series": [{"data": [[1.60950564E12, 43.64465981637954], [1.60950558E12, 36.936136730683856], [1.6095057E12, 44.097737136798294], [1.60950552E12, 23.447179430952257]], "isOverall": false, "label": "go", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6095057E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60950552E12, "maxY": 8418.0, "series": [{"data": [[1.60950564E12, 4479.0], [1.60950558E12, 8418.0], [1.6095057E12, 7261.0], [1.60950552E12, 3254.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60950564E12, 0.0], [1.60950558E12, 0.0], [1.6095057E12, 0.0], [1.60950552E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60950564E12, 155.90000000000146], [1.60950558E12, 145.0], [1.6095057E12, 1016.0], [1.60950552E12, 150.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60950564E12, 2049.9900000000016], [1.60950558E12, 3039.0], [1.6095057E12, 2058.9900000000016], [1.60950552E12, 1242.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60950564E12, 1039.0], [1.60950558E12, 1040.0], [1.6095057E12, 1042.0], [1.60950552E12, 1039.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6095057E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 1000.0, "maxY": 1017.0, "series": [{"data": [[1000.0, 65.0], [2000.0, 40.0], [3000.0, 30.0], [4000.0, 26.0], [5000.0, 25.0], [6000.0, 23.0], [7000.0, 22.0], [8000.0, 22.0], [9000.0, 22.0], [10000.0, 21.0], [11000.0, 21.0], [12000.0, 21.0], [13000.0, 21.0], [14000.0, 21.0], [15000.0, 20.0], [16000.0, 20.0], [17000.0, 20.0], [18000.0, 20.0], [19000.0, 20.0], [20000.0, 20.0], [21000.0, 19.0], [22000.0, 19.0], [23000.0, 20.0], [24000.0, 19.0], [25000.0, 20.0], [26000.0, 19.0], [27000.0, 18.0], [28000.0, 18.0], [29000.0, 19.0], [30000.0, 19.0], [31000.0, 20.5], [32000.0, 18.0], [34000.0, 15.0], [33000.0, 19.0], [36000.0, 18.0], [35000.0, 19.0], [37000.0, 24.0], [38000.0, 20.0], [40000.0, 21.0], [39000.0, 22.0], [41000.0, 20.0], [42000.0, 25.0], [43000.0, 26.0], [44000.0, 23.0], [45000.0, 19.0], [46000.0, 45.0], [47000.0, 23.0], [48000.0, 28.0], [49000.0, 20.0], [50000.0, 18.0], [51000.0, 27.0], [52000.0, 19.5], [53000.0, 14.0], [54000.0, 18.0], [55000.0, 26.0], [56000.0, 69.0], [57000.0, 20.0], [58000.0, 58.0], [59000.0, 24.0], [60000.0, 25.0], [61000.0, 20.0], [63000.0, 73.0], [62000.0, 21.0], [64000.0, 9.0], [65000.0, 6.0], [66000.0, 36.5], [68000.0, 80.0], [67000.0, 23.0], [69000.0, 129.0], [70000.0, 24.0], [71000.0, 61.0], [72000.0, 17.0], [76000.0, 1017.0], [75000.0, 26.0], [74000.0, 24.0], [81000.0, 62.5], [78000.0, 61.0], [80000.0, 66.0], [84000.0, 68.5], [85000.0, 72.0], [88000.0, 85.5], [90000.0, 67.0], [89000.0, 9.0], [93000.0, 22.0], [97000.0, 62.0], [95000.0, 68.0], [101000.0, 75.0], [102000.0, 67.0], [105000.0, 81.0], [107000.0, 96.0], [109000.0, 106.0], [112000.0, 15.0], [118000.0, 82.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 118000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 1000.0, "maxY": 1017.0, "series": [{"data": [[1000.0, 65.0], [2000.0, 40.0], [3000.0, 30.0], [4000.0, 26.0], [5000.0, 25.0], [6000.0, 23.0], [7000.0, 22.0], [8000.0, 22.0], [9000.0, 22.0], [10000.0, 21.0], [11000.0, 21.0], [12000.0, 21.0], [13000.0, 21.0], [14000.0, 21.0], [15000.0, 20.0], [16000.0, 20.0], [17000.0, 20.0], [18000.0, 20.0], [19000.0, 20.0], [20000.0, 20.0], [21000.0, 19.0], [22000.0, 19.0], [23000.0, 20.0], [24000.0, 19.0], [25000.0, 20.0], [26000.0, 19.0], [27000.0, 18.0], [28000.0, 18.0], [29000.0, 19.0], [30000.0, 19.0], [31000.0, 20.5], [32000.0, 18.0], [34000.0, 15.0], [33000.0, 19.0], [36000.0, 18.0], [35000.0, 19.0], [37000.0, 24.0], [38000.0, 20.0], [40000.0, 21.0], [39000.0, 22.0], [41000.0, 20.0], [42000.0, 25.0], [43000.0, 26.0], [44000.0, 23.0], [45000.0, 19.0], [46000.0, 45.0], [47000.0, 23.0], [48000.0, 28.0], [49000.0, 20.0], [50000.0, 18.0], [51000.0, 27.0], [52000.0, 19.5], [53000.0, 14.0], [54000.0, 18.0], [55000.0, 26.0], [56000.0, 69.0], [57000.0, 20.0], [58000.0, 58.0], [59000.0, 24.0], [60000.0, 25.0], [61000.0, 20.0], [63000.0, 73.0], [62000.0, 21.0], [64000.0, 9.0], [65000.0, 6.0], [66000.0, 36.5], [68000.0, 80.0], [67000.0, 23.0], [69000.0, 129.0], [70000.0, 24.0], [71000.0, 61.0], [72000.0, 17.0], [76000.0, 1017.0], [75000.0, 26.0], [74000.0, 24.0], [81000.0, 62.5], [78000.0, 61.0], [80000.0, 66.0], [84000.0, 68.0], [85000.0, 72.0], [88000.0, 85.5], [90000.0, 67.0], [89000.0, 9.0], [93000.0, 22.0], [97000.0, 62.0], [95000.0, 67.0], [101000.0, 75.0], [102000.0, 67.0], [105000.0, 81.0], [107000.0, 96.0], [109000.0, 106.0], [112000.0, 15.0], [118000.0, 82.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 118000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2446.75, "minX": 1.60950552E12, "maxY": 6852.216666666666, "series": [{"data": [[1.60950564E12, 6852.216666666666], [1.60950558E12, 6851.433333333333], [1.6095057E12, 4514.5], [1.60950552E12, 2446.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6095057E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2432.133333333333, "minX": 1.60950552E12, "maxY": 6852.916666666667, "series": [{"data": [[1.60950564E12, 6852.916666666667], [1.60950558E12, 6852.4], [1.6095057E12, 4527.45], [1.60950552E12, 2432.133333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6095057E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2432.133333333333, "minX": 1.60950552E12, "maxY": 6852.916666666667, "series": [{"data": [[1.60950564E12, 6852.916666666667], [1.60950558E12, 6852.4], [1.6095057E12, 4527.45], [1.60950552E12, 2432.133333333333]], "isOverall": false, "label": "go-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6095057E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2432.133333333333, "minX": 1.60950552E12, "maxY": 6852.916666666667, "series": [{"data": [[1.60950564E12, 6852.916666666667], [1.60950558E12, 6852.4], [1.6095057E12, 4527.45], [1.60950552E12, 2432.133333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6095057E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

