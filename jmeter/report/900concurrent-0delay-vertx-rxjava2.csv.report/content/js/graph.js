/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 8118.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 3.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 4.0], [1.4, 4.0], [1.5, 4.0], [1.6, 4.0], [1.7, 4.0], [1.8, 4.0], [1.9, 4.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 7.0], [4.8, 7.0], [4.9, 7.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 8.0], [6.3, 8.0], [6.4, 8.0], [6.5, 8.0], [6.6, 8.0], [6.7, 8.0], [6.8, 8.0], [6.9, 8.0], [7.0, 8.0], [7.1, 8.0], [7.2, 8.0], [7.3, 8.0], [7.4, 8.0], [7.5, 8.0], [7.6, 8.0], [7.7, 8.0], [7.8, 8.0], [7.9, 8.0], [8.0, 9.0], [8.1, 9.0], [8.2, 9.0], [8.3, 9.0], [8.4, 9.0], [8.5, 9.0], [8.6, 9.0], [8.7, 9.0], [8.8, 9.0], [8.9, 9.0], [9.0, 9.0], [9.1, 9.0], [9.2, 9.0], [9.3, 9.0], [9.4, 9.0], [9.5, 9.0], [9.6, 9.0], [9.7, 9.0], [9.8, 9.0], [9.9, 9.0], [10.0, 9.0], [10.1, 9.0], [10.2, 9.0], [10.3, 9.0], [10.4, 10.0], [10.5, 10.0], [10.6, 10.0], [10.7, 10.0], [10.8, 10.0], [10.9, 10.0], [11.0, 10.0], [11.1, 10.0], [11.2, 10.0], [11.3, 10.0], [11.4, 10.0], [11.5, 10.0], [11.6, 10.0], [11.7, 10.0], [11.8, 10.0], [11.9, 10.0], [12.0, 10.0], [12.1, 10.0], [12.2, 10.0], [12.3, 10.0], [12.4, 10.0], [12.5, 10.0], [12.6, 10.0], [12.7, 10.0], [12.8, 10.0], [12.9, 10.0], [13.0, 10.0], [13.1, 10.0], [13.2, 11.0], [13.3, 11.0], [13.4, 11.0], [13.5, 11.0], [13.6, 11.0], [13.7, 11.0], [13.8, 11.0], [13.9, 11.0], [14.0, 11.0], [14.1, 11.0], [14.2, 11.0], [14.3, 11.0], [14.4, 11.0], [14.5, 11.0], [14.6, 11.0], [14.7, 11.0], [14.8, 11.0], [14.9, 11.0], [15.0, 11.0], [15.1, 11.0], [15.2, 11.0], [15.3, 11.0], [15.4, 11.0], [15.5, 11.0], [15.6, 11.0], [15.7, 11.0], [15.8, 11.0], [15.9, 11.0], [16.0, 11.0], [16.1, 11.0], [16.2, 11.0], [16.3, 12.0], [16.4, 12.0], [16.5, 12.0], [16.6, 12.0], [16.7, 12.0], [16.8, 12.0], [16.9, 12.0], [17.0, 12.0], [17.1, 12.0], [17.2, 12.0], [17.3, 12.0], [17.4, 12.0], [17.5, 12.0], [17.6, 12.0], [17.7, 12.0], [17.8, 12.0], [17.9, 12.0], [18.0, 12.0], [18.1, 12.0], [18.2, 12.0], [18.3, 12.0], [18.4, 12.0], [18.5, 12.0], [18.6, 12.0], [18.7, 12.0], [18.8, 12.0], [18.9, 12.0], [19.0, 12.0], [19.1, 12.0], [19.2, 12.0], [19.3, 12.0], [19.4, 12.0], [19.5, 12.0], [19.6, 12.0], [19.7, 12.0], [19.8, 13.0], [19.9, 13.0], [20.0, 13.0], [20.1, 13.0], [20.2, 13.0], [20.3, 13.0], [20.4, 13.0], [20.5, 13.0], [20.6, 13.0], [20.7, 13.0], [20.8, 13.0], [20.9, 13.0], [21.0, 13.0], [21.1, 13.0], [21.2, 13.0], [21.3, 13.0], [21.4, 13.0], [21.5, 13.0], [21.6, 13.0], [21.7, 13.0], [21.8, 13.0], [21.9, 13.0], [22.0, 13.0], [22.1, 13.0], [22.2, 13.0], [22.3, 13.0], [22.4, 13.0], [22.5, 13.0], [22.6, 13.0], [22.7, 13.0], [22.8, 13.0], [22.9, 13.0], [23.0, 13.0], [23.1, 13.0], [23.2, 13.0], [23.3, 13.0], [23.4, 14.0], [23.5, 14.0], [23.6, 14.0], [23.7, 14.0], [23.8, 14.0], [23.9, 14.0], [24.0, 14.0], [24.1, 14.0], [24.2, 14.0], [24.3, 14.0], [24.4, 14.0], [24.5, 14.0], [24.6, 14.0], [24.7, 14.0], [24.8, 14.0], [24.9, 14.0], [25.0, 14.0], [25.1, 14.0], [25.2, 14.0], [25.3, 14.0], [25.4, 14.0], [25.5, 14.0], [25.6, 14.0], [25.7, 14.0], [25.8, 14.0], [25.9, 14.0], [26.0, 14.0], [26.1, 14.0], [26.2, 14.0], [26.3, 14.0], [26.4, 14.0], [26.5, 14.0], [26.6, 14.0], [26.7, 14.0], [26.8, 14.0], [26.9, 14.0], [27.0, 15.0], [27.1, 15.0], [27.2, 15.0], [27.3, 15.0], [27.4, 15.0], [27.5, 15.0], [27.6, 15.0], [27.7, 15.0], [27.8, 15.0], [27.9, 15.0], [28.0, 15.0], [28.1, 15.0], [28.2, 15.0], [28.3, 15.0], [28.4, 15.0], [28.5, 15.0], [28.6, 15.0], [28.7, 15.0], [28.8, 15.0], [28.9, 15.0], [29.0, 15.0], [29.1, 15.0], [29.2, 15.0], [29.3, 15.0], [29.4, 15.0], [29.5, 15.0], [29.6, 15.0], [29.7, 15.0], [29.8, 15.0], [29.9, 15.0], [30.0, 15.0], [30.1, 15.0], [30.2, 15.0], [30.3, 15.0], [30.4, 15.0], [30.5, 15.0], [30.6, 15.0], [30.7, 16.0], [30.8, 16.0], [30.9, 16.0], [31.0, 16.0], [31.1, 16.0], [31.2, 16.0], [31.3, 16.0], [31.4, 16.0], [31.5, 16.0], [31.6, 16.0], [31.7, 16.0], [31.8, 16.0], [31.9, 16.0], [32.0, 16.0], [32.1, 16.0], [32.2, 16.0], [32.3, 16.0], [32.4, 16.0], [32.5, 16.0], [32.6, 16.0], [32.7, 16.0], [32.8, 16.0], [32.9, 16.0], [33.0, 16.0], [33.1, 16.0], [33.2, 16.0], [33.3, 16.0], [33.4, 16.0], [33.5, 16.0], [33.6, 16.0], [33.7, 16.0], [33.8, 16.0], [33.9, 16.0], [34.0, 16.0], [34.1, 16.0], [34.2, 16.0], [34.3, 17.0], [34.4, 17.0], [34.5, 17.0], [34.6, 17.0], [34.7, 17.0], [34.8, 17.0], [34.9, 17.0], [35.0, 17.0], [35.1, 17.0], [35.2, 17.0], [35.3, 17.0], [35.4, 17.0], [35.5, 17.0], [35.6, 17.0], [35.7, 17.0], [35.8, 17.0], [35.9, 17.0], [36.0, 17.0], [36.1, 17.0], [36.2, 17.0], [36.3, 17.0], [36.4, 17.0], [36.5, 17.0], [36.6, 17.0], [36.7, 17.0], [36.8, 17.0], [36.9, 17.0], [37.0, 17.0], [37.1, 17.0], [37.2, 17.0], [37.3, 17.0], [37.4, 17.0], [37.5, 17.0], [37.6, 17.0], [37.7, 18.0], [37.8, 18.0], [37.9, 18.0], [38.0, 18.0], [38.1, 18.0], [38.2, 18.0], [38.3, 18.0], [38.4, 18.0], [38.5, 18.0], [38.6, 18.0], [38.7, 18.0], [38.8, 18.0], [38.9, 18.0], [39.0, 18.0], [39.1, 18.0], [39.2, 18.0], [39.3, 18.0], [39.4, 18.0], [39.5, 18.0], [39.6, 18.0], [39.7, 18.0], [39.8, 18.0], [39.9, 18.0], [40.0, 18.0], [40.1, 18.0], [40.2, 18.0], [40.3, 18.0], [40.4, 18.0], [40.5, 18.0], [40.6, 18.0], [40.7, 18.0], [40.8, 18.0], [40.9, 19.0], [41.0, 19.0], [41.1, 19.0], [41.2, 19.0], [41.3, 19.0], [41.4, 19.0], [41.5, 19.0], [41.6, 19.0], [41.7, 19.0], [41.8, 19.0], [41.9, 19.0], [42.0, 19.0], [42.1, 19.0], [42.2, 19.0], [42.3, 19.0], [42.4, 19.0], [42.5, 19.0], [42.6, 19.0], [42.7, 19.0], [42.8, 19.0], [42.9, 19.0], [43.0, 19.0], [43.1, 19.0], [43.2, 19.0], [43.3, 19.0], [43.4, 19.0], [43.5, 19.0], [43.6, 19.0], [43.7, 19.0], [43.8, 19.0], [43.9, 19.0], [44.0, 20.0], [44.1, 20.0], [44.2, 20.0], [44.3, 20.0], [44.4, 20.0], [44.5, 20.0], [44.6, 20.0], [44.7, 20.0], [44.8, 20.0], [44.9, 20.0], [45.0, 20.0], [45.1, 20.0], [45.2, 20.0], [45.3, 20.0], [45.4, 20.0], [45.5, 20.0], [45.6, 20.0], [45.7, 20.0], [45.8, 20.0], [45.9, 20.0], [46.0, 20.0], [46.1, 20.0], [46.2, 20.0], [46.3, 20.0], [46.4, 20.0], [46.5, 20.0], [46.6, 20.0], [46.7, 20.0], [46.8, 20.0], [46.9, 20.0], [47.0, 21.0], [47.1, 21.0], [47.2, 21.0], [47.3, 21.0], [47.4, 21.0], [47.5, 21.0], [47.6, 21.0], [47.7, 21.0], [47.8, 21.0], [47.9, 21.0], [48.0, 21.0], [48.1, 21.0], [48.2, 21.0], [48.3, 21.0], [48.4, 21.0], [48.5, 21.0], [48.6, 21.0], [48.7, 21.0], [48.8, 21.0], [48.9, 21.0], [49.0, 21.0], [49.1, 21.0], [49.2, 21.0], [49.3, 21.0], [49.4, 21.0], [49.5, 21.0], [49.6, 21.0], [49.7, 22.0], [49.8, 22.0], [49.9, 22.0], [50.0, 22.0], [50.1, 22.0], [50.2, 22.0], [50.3, 22.0], [50.4, 22.0], [50.5, 22.0], [50.6, 22.0], [50.7, 22.0], [50.8, 22.0], [50.9, 22.0], [51.0, 22.0], [51.1, 22.0], [51.2, 22.0], [51.3, 22.0], [51.4, 22.0], [51.5, 22.0], [51.6, 22.0], [51.7, 22.0], [51.8, 22.0], [51.9, 22.0], [52.0, 22.0], [52.1, 22.0], [52.2, 23.0], [52.3, 23.0], [52.4, 23.0], [52.5, 23.0], [52.6, 23.0], [52.7, 23.0], [52.8, 23.0], [52.9, 23.0], [53.0, 23.0], [53.1, 23.0], [53.2, 23.0], [53.3, 23.0], [53.4, 23.0], [53.5, 23.0], [53.6, 23.0], [53.7, 23.0], [53.8, 23.0], [53.9, 23.0], [54.0, 23.0], [54.1, 23.0], [54.2, 23.0], [54.3, 23.0], [54.4, 23.0], [54.5, 24.0], [54.6, 24.0], [54.7, 24.0], [54.8, 24.0], [54.9, 24.0], [55.0, 24.0], [55.1, 24.0], [55.2, 24.0], [55.3, 24.0], [55.4, 24.0], [55.5, 24.0], [55.6, 24.0], [55.7, 24.0], [55.8, 24.0], [55.9, 24.0], [56.0, 24.0], [56.1, 24.0], [56.2, 24.0], [56.3, 24.0], [56.4, 24.0], [56.5, 24.0], [56.6, 24.0], [56.7, 25.0], [56.8, 25.0], [56.9, 25.0], [57.0, 25.0], [57.1, 25.0], [57.2, 25.0], [57.3, 25.0], [57.4, 25.0], [57.5, 25.0], [57.6, 25.0], [57.7, 25.0], [57.8, 25.0], [57.9, 25.0], [58.0, 25.0], [58.1, 25.0], [58.2, 25.0], [58.3, 25.0], [58.4, 25.0], [58.5, 25.0], [58.6, 25.0], [58.7, 26.0], [58.8, 26.0], [58.9, 26.0], [59.0, 26.0], [59.1, 26.0], [59.2, 26.0], [59.3, 26.0], [59.4, 26.0], [59.5, 26.0], [59.6, 26.0], [59.7, 26.0], [59.8, 26.0], [59.9, 26.0], [60.0, 26.0], [60.1, 26.0], [60.2, 26.0], [60.3, 26.0], [60.4, 26.0], [60.5, 26.0], [60.6, 27.0], [60.7, 27.0], [60.8, 27.0], [60.9, 27.0], [61.0, 27.0], [61.1, 27.0], [61.2, 27.0], [61.3, 27.0], [61.4, 27.0], [61.5, 27.0], [61.6, 27.0], [61.7, 27.0], [61.8, 27.0], [61.9, 27.0], [62.0, 27.0], [62.1, 27.0], [62.2, 27.0], [62.3, 28.0], [62.4, 28.0], [62.5, 28.0], [62.6, 28.0], [62.7, 28.0], [62.8, 28.0], [62.9, 28.0], [63.0, 28.0], [63.1, 28.0], [63.2, 28.0], [63.3, 28.0], [63.4, 28.0], [63.5, 28.0], [63.6, 28.0], [63.7, 28.0], [63.8, 28.0], [63.9, 29.0], [64.0, 29.0], [64.1, 29.0], [64.2, 29.0], [64.3, 29.0], [64.4, 29.0], [64.5, 29.0], [64.6, 29.0], [64.7, 29.0], [64.8, 29.0], [64.9, 29.0], [65.0, 29.0], [65.1, 29.0], [65.2, 29.0], [65.3, 29.0], [65.4, 30.0], [65.5, 30.0], [65.6, 30.0], [65.7, 30.0], [65.8, 30.0], [65.9, 30.0], [66.0, 30.0], [66.1, 30.0], [66.2, 30.0], [66.3, 30.0], [66.4, 30.0], [66.5, 30.0], [66.6, 30.0], [66.7, 30.0], [66.8, 31.0], [66.9, 31.0], [67.0, 31.0], [67.1, 31.0], [67.2, 31.0], [67.3, 31.0], [67.4, 31.0], [67.5, 31.0], [67.6, 31.0], [67.7, 31.0], [67.8, 31.0], [67.9, 31.0], [68.0, 32.0], [68.1, 32.0], [68.2, 32.0], [68.3, 32.0], [68.4, 32.0], [68.5, 32.0], [68.6, 32.0], [68.7, 32.0], [68.8, 32.0], [68.9, 32.0], [69.0, 32.0], [69.1, 32.0], [69.2, 33.0], [69.3, 33.0], [69.4, 33.0], [69.5, 33.0], [69.6, 33.0], [69.7, 33.0], [69.8, 33.0], [69.9, 33.0], [70.0, 33.0], [70.1, 33.0], [70.2, 33.0], [70.3, 34.0], [70.4, 34.0], [70.5, 34.0], [70.6, 34.0], [70.7, 34.0], [70.8, 34.0], [70.9, 34.0], [71.0, 34.0], [71.1, 34.0], [71.2, 34.0], [71.3, 35.0], [71.4, 35.0], [71.5, 35.0], [71.6, 35.0], [71.7, 35.0], [71.8, 35.0], [71.9, 35.0], [72.0, 35.0], [72.1, 35.0], [72.2, 36.0], [72.3, 36.0], [72.4, 36.0], [72.5, 36.0], [72.6, 36.0], [72.7, 36.0], [72.8, 36.0], [72.9, 36.0], [73.0, 36.0], [73.1, 37.0], [73.2, 37.0], [73.3, 37.0], [73.4, 37.0], [73.5, 37.0], [73.6, 37.0], [73.7, 37.0], [73.8, 37.0], [73.9, 38.0], [74.0, 38.0], [74.1, 38.0], [74.2, 38.0], [74.3, 38.0], [74.4, 38.0], [74.5, 38.0], [74.6, 38.0], [74.7, 39.0], [74.8, 39.0], [74.9, 39.0], [75.0, 39.0], [75.1, 39.0], [75.2, 39.0], [75.3, 39.0], [75.4, 40.0], [75.5, 40.0], [75.6, 40.0], [75.7, 40.0], [75.8, 40.0], [75.9, 40.0], [76.0, 41.0], [76.1, 41.0], [76.2, 41.0], [76.3, 41.0], [76.4, 41.0], [76.5, 41.0], [76.6, 42.0], [76.7, 42.0], [76.8, 42.0], [76.9, 42.0], [77.0, 42.0], [77.1, 42.0], [77.2, 43.0], [77.3, 43.0], [77.4, 43.0], [77.5, 43.0], [77.6, 43.0], [77.7, 44.0], [77.8, 44.0], [77.9, 44.0], [78.0, 44.0], [78.1, 44.0], [78.2, 45.0], [78.3, 45.0], [78.4, 45.0], [78.5, 45.0], [78.6, 45.0], [78.7, 46.0], [78.8, 46.0], [78.9, 46.0], [79.0, 46.0], [79.1, 47.0], [79.2, 47.0], [79.3, 47.0], [79.4, 47.0], [79.5, 47.0], [79.6, 48.0], [79.7, 48.0], [79.8, 48.0], [79.9, 49.0], [80.0, 49.0], [80.1, 49.0], [80.2, 49.0], [80.3, 50.0], [80.4, 50.0], [80.5, 50.0], [80.6, 51.0], [80.7, 51.0], [80.8, 51.0], [80.9, 51.0], [81.0, 52.0], [81.1, 52.0], [81.2, 52.0], [81.3, 53.0], [81.4, 53.0], [81.5, 54.0], [81.6, 54.0], [81.7, 54.0], [81.8, 55.0], [81.9, 55.0], [82.0, 56.0], [82.1, 56.0], [82.2, 56.0], [82.3, 57.0], [82.4, 57.0], [82.5, 58.0], [82.6, 58.0], [82.7, 59.0], [82.8, 59.0], [82.9, 60.0], [83.0, 60.0], [83.1, 61.0], [83.2, 61.0], [83.3, 62.0], [83.4, 62.0], [83.5, 63.0], [83.6, 64.0], [83.7, 64.0], [83.8, 65.0], [83.9, 65.0], [84.0, 66.0], [84.1, 67.0], [84.2, 67.0], [84.3, 68.0], [84.4, 69.0], [84.5, 70.0], [84.6, 70.0], [84.7, 71.0], [84.8, 72.0], [84.9, 73.0], [85.0, 74.0], [85.1, 75.0], [85.2, 76.0], [85.3, 77.0], [85.4, 77.0], [85.5, 78.0], [85.6, 79.0], [85.7, 80.0], [85.8, 81.0], [85.9, 82.0], [86.0, 84.0], [86.1, 85.0], [86.2, 86.0], [86.3, 87.0], [86.4, 88.0], [86.5, 90.0], [86.6, 91.0], [86.7, 92.0], [86.8, 94.0], [86.9, 95.0], [87.0, 96.0], [87.1, 98.0], [87.2, 99.0], [87.3, 101.0], [87.4, 102.0], [87.5, 104.0], [87.6, 105.0], [87.7, 107.0], [87.8, 109.0], [87.9, 111.0], [88.0, 112.0], [88.1, 114.0], [88.2, 116.0], [88.3, 118.0], [88.4, 120.0], [88.5, 122.0], [88.6, 125.0], [88.7, 127.0], [88.8, 129.0], [88.9, 132.0], [89.0, 134.0], [89.1, 136.0], [89.2, 139.0], [89.3, 142.0], [89.4, 145.0], [89.5, 148.0], [89.6, 151.0], [89.7, 155.0], [89.8, 158.0], [89.9, 162.0], [90.0, 165.0], [90.1, 169.0], [90.2, 173.0], [90.3, 178.0], [90.4, 182.0], [90.5, 188.0], [90.6, 193.0], [90.7, 199.0], [90.8, 205.0], [90.9, 211.0], [91.0, 217.0], [91.1, 224.0], [91.2, 233.0], [91.3, 242.0], [91.4, 255.0], [91.5, 271.0], [91.6, 292.0], [91.7, 327.0], [91.8, 410.0], [91.9, 1012.0], [92.0, 1015.0], [92.1, 1017.0], [92.2, 1019.0], [92.3, 1021.0], [92.4, 1022.0], [92.5, 1023.0], [92.6, 1024.0], [92.7, 1025.0], [92.8, 1026.0], [92.9, 1027.0], [93.0, 1028.0], [93.1, 1028.0], [93.2, 1029.0], [93.3, 1030.0], [93.4, 1031.0], [93.5, 1031.0], [93.6, 1032.0], [93.7, 1033.0], [93.8, 1033.0], [93.9, 1034.0], [94.0, 1035.0], [94.1, 1035.0], [94.2, 1036.0], [94.3, 1036.0], [94.4, 1037.0], [94.5, 1038.0], [94.6, 1038.0], [94.7, 1039.0], [94.8, 1039.0], [94.9, 1040.0], [95.0, 1040.0], [95.1, 1041.0], [95.2, 1042.0], [95.3, 1042.0], [95.4, 1043.0], [95.5, 1043.0], [95.6, 1044.0], [95.7, 1044.0], [95.8, 1045.0], [95.9, 1046.0], [96.0, 1046.0], [96.1, 1047.0], [96.2, 1048.0], [96.3, 1048.0], [96.4, 1049.0], [96.5, 1050.0], [96.6, 1051.0], [96.7, 1052.0], [96.8, 1052.0], [96.9, 1053.0], [97.0, 1054.0], [97.1, 1055.0], [97.2, 1056.0], [97.3, 1057.0], [97.4, 1058.0], [97.5, 1060.0], [97.6, 1061.0], [97.7, 1063.0], [97.8, 1064.0], [97.9, 1066.0], [98.0, 1068.0], [98.1, 1070.0], [98.2, 1073.0], [98.3, 1077.0], [98.4, 1081.0], [98.5, 1087.0], [98.6, 1096.0], [98.7, 1110.0], [98.8, 1142.0], [98.9, 1213.0], [99.0, 1236.0], [99.1, 1247.0], [99.2, 1257.0], [99.3, 1275.0], [99.4, 1336.0], [99.5, 2042.0], [99.6, 2060.0], [99.7, 2091.0], [99.8, 3044.0], [99.9, 3071.0]], "isOverall": false, "label": "vertx-rxjava2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1080399.0, "series": [{"data": [[0.0, 1080399.0], [600.0, 2.0], [1000.0, 84167.0], [1100.0, 3149.0], [1200.0, 5906.0], [1300.0, 809.0], [1400.0, 561.0], [1500.0, 125.0], [100.0, 43277.0], [1700.0, 2.0], [2000.0, 2756.0], [2100.0, 136.0], [2200.0, 355.0], [2300.0, 22.0], [2400.0, 35.0], [2500.0, 1.0], [3000.0, 2502.0], [3100.0, 169.0], [200.0, 11288.0], [3200.0, 71.0], [3300.0, 1.0], [4000.0, 209.0], [4100.0, 34.0], [4200.0, 18.0], [4300.0, 3.0], [300.0, 2111.0], [6000.0, 5.0], [400.0, 407.0], [7000.0, 29.0], [7100.0, 20.0], [7200.0, 5.0], [7300.0, 7.0], [500.0, 116.0], [8100.0, 25.0]], "isOverall": false, "label": "vertx-rxjava2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6528.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1137485.0, "series": [{"data": [[0.0, 1137485.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 94709.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6528.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 796.1184519708276, "minX": 1.60950576E12, "maxY": 900.0, "series": [{"data": [[1.60950582E12, 900.0], [1.60950594E12, 894.9897350657253], [1.60950576E12, 796.1184519708276], [1.60950588E12, 900.0]], "isOverall": false, "label": "vertx-rxjava2", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60950594E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.4242424242424242, "minX": 1.0, "maxY": 1019.0, "series": [{"data": [[2.0, 0.4242424242424242], [3.0, 0.4482758620689654], [4.0, 0.42857142857142866], [5.0, 0.6133333333333334], [6.0, 0.6428571428571429], [7.0, 140.5977011494253], [8.0, 0.8210526315789475], [9.0, 0.8285714285714283], [10.0, 126.21649484536081], [11.0, 92.14999999999999], [12.0, 1.1203703703703702], [13.0, 1.2407407407407414], [14.0, 1.1851851851851853], [15.0, 1.4036697247706422], [16.0, 1.4363636363636356], [17.0, 1.6448598130841119], [18.0, 1.6974789915966384], [19.0, 1.8608695652173914], [20.0, 1.6949152542372878], [21.0, 1.7946428571428572], [22.0, 286.8461538461538], [23.0, 2.057692307692308], [24.0, 1.991735537190082], [25.0, 2.166666666666667], [26.0, 2.3559322033898304], [27.0, 10.323076923076924], [28.0, 2.4015748031496056], [29.0, 10.967479674796747], [30.0, 2.3543307086614185], [31.0, 2.6589147286821704], [32.0, 2.5793650793650778], [33.0, 17.438848920863308], [34.0, 2.8559999999999994], [35.0, 2.699248120300753], [36.0, 2.9929078014184407], [37.0, 18.916030534351144], [38.0, 3.389380530973451], [39.0, 25.0], [40.0, 10.894736842105264], [41.0, 21.10344827586207], [42.0, 19.787401574803148], [43.0, 13.283185840707965], [44.0, 13.017857142857144], [45.0, 12.2], [46.0, 3.8306451612903216], [47.0, 4.113821138211383], [48.0, 4.3], [49.0, 4.439024390243903], [50.0, 3.9999999999999996], [51.0, 29.16260162601626], [52.0, 13.074380165289258], [53.0, 12.213740458015264], [54.0, 11.608391608391607], [55.0, 25.08490566037736], [56.0, 13.552845528455283], [57.0, 4.447058823529413], [58.0, 42.027522935779814], [59.0, 12.725925925925925], [60.0, 18.531645569620252], [61.0, 24.333333333333336], [62.0, 5.883928571428573], [63.0, 6.159663865546221], [64.0, 37.8062015503876], [65.0, 12.462686567164177], [66.0, 24.666666666666664], [67.0, 19.513157894736842], [68.0, 23.344537815126053], [69.0, 15.027777777777779], [70.0, 6.219512195121951], [71.0, 5.383458646616542], [72.0, 31.203252032520325], [73.0, 6.208695652173911], [74.0, 23.520661157024797], [75.0, 16.4018691588785], [76.0, 6.285714285714284], [77.0, 30.609375], [78.0, 7.2200000000000015], [79.0, 8.405172413793107], [80.0, 25.643478260869564], [81.0, 7.854166666666667], [82.0, 14.73880597014925], [83.0, 29.384615384615387], [84.0, 7.607476635514018], [85.0, 22.786259541984734], [86.0, 7.751879699248119], [87.0, 23.0], [88.0, 6.875816993464049], [89.0, 7.508196721311472], [90.0, 43.086021505376344], [91.0, 13.987261146496813], [92.0, 15.454545454545457], [93.0, 8.06474820143885], [94.0, 21.874125874125873], [95.0, 9.194444444444443], [96.0, 8.616666666666664], [97.0, 33.016], [98.0, 8.666666666666668], [99.0, 1012.5], [100.0, 1.0], [101.0, 20.000000000000004], [102.0, 15.979166666666671], [103.0, 27.594771241830056], [104.0, 13.99328859060403], [105.0, 16.624000000000002], [106.0, 8.97515527950311], [107.0, 18.855670103092788], [108.0, 39.03658536585366], [109.0, 8.66386554621849], [110.0, 9.915384615384614], [111.0, 8.634146341463412], [112.0, 9.5891472868217], [113.0, 8.94267515923567], [114.0, 9.972413793103444], [115.0, 9.893203883495147], [116.0, 270.8829787234043], [117.0, 12.582524271844663], [118.0, 10.54320987654321], [119.0, 11.65], [120.0, 15.594594594594595], [121.0, 14.085714285714289], [122.0, 19.08695652173913], [123.0, 20.13636363636363], [124.0, 19.2156862745098], [125.0, 24.72222222222222], [126.0, 31.655172413793103], [127.0, 35.11111111111112], [128.0, 45.61538461538462], [129.0, 60.03703703703703], [130.0, 76.66666666666666], [131.0, 73.25], [132.0, 73.4], [133.0, 84.40000000000002], [134.0, 115.0], [135.0, 95.5], [136.0, 96.18181818181819], [137.0, 103.18181818181819], [138.0, 107.07692307692308], [139.0, 128.25], [140.0, 141.2], [141.0, 183.83333333333334], [142.0, 157.88888888888889], [143.0, 136.72727272727272], [144.0, 598.6923076923077], [145.0, 189.66666666666666], [146.0, 274.3333333333333], [147.0, 249.06666666666666], [148.0, 148.16666666666669], [149.0, 353.5], [150.0, 667.0833333333333], [151.0, 200.36363636363635], [152.0, 120.14285714285711], [153.0, 46.37333333333332], [154.0, 35.992424242424235], [155.0, 31.285714285714302], [156.0, 10.376470588235291], [157.0, 20.524324324324322], [158.0, 24.321839080459768], [159.0, 68.35714285714286], [160.0, 16.454545454545453], [161.0, 20.29729729729729], [162.0, 10.691729323308271], [163.0, 23.9271523178808], [164.0, 23.814814814814813], [165.0, 24.276119402985074], [166.0, 19.71544715447154], [167.0, 11.008130081300807], [168.0, 10.59183673469388], [169.0, 17.899280575539564], [170.0, 10.739726027397259], [171.0, 16.831460674157295], [172.0, 21.96621621621622], [173.0, 9.168539325842696], [174.0, 54.30496453900709], [175.0, 19.287999999999997], [176.0, 10.627906976744182], [177.0, 19.538461538461533], [178.0, 31.88073394495413], [179.0, 14.915789473684212], [180.0, 18.448275862068968], [181.0, 24.963768115942027], [182.0, 42.05454545454545], [183.0, 14.195876288659793], [184.0, 28.869918699186996], [185.0, 38.549180327868854], [186.0, 77.0], [187.0, 22.791366906474813], [188.0, 20.115384615384617], [189.0, 18.23841059602649], [190.0, 21.909909909909906], [191.0, 12.651376146788989], [192.0, 16.26612903225807], [193.0, 9.444444444444443], [194.0, 13.285714285714288], [195.0, 15.553921568627453], [196.0, 12.94897959183673], [197.0, 13.057692307692312], [198.0, 12.213114754098358], [199.0, 12.708661417322835], [200.0, 12.720000000000006], [201.0, 14.385826771653544], [202.0, 14.11290322580645], [203.0, 15.932203389830509], [204.0, 12.89855072463768], [205.0, 16.076271186440675], [206.0, 16.7], [207.0, 17.662650602409638], [208.0, 25.828571428571433], [209.0, 21.978723404255323], [210.0, 26.981132075471695], [211.0, 17.43589743589743], [212.0, 22.450000000000003], [213.0, 32.46666666666666], [214.0, 46.80952380952381], [215.0, 46.50000000000001], [216.0, 52.61904761904761], [217.0, 57.888888888888886], [218.0, 388.7333333333333], [219.0, 661.5999999999999], [220.0, 310.75], [221.0, 176.0769230769231], [222.0, 87.8], [223.0, 270.53846153846155], [224.0, 149.45454545454544], [225.0, 323.4666666666667], [226.0, 204.33333333333331], [227.0, 128.83333333333331], [228.0, 511.8], [229.0, 695.4], [230.0, 198.72727272727272], [231.0, 137.4], [233.0, 479.5], [234.0, 180.5], [235.0, 172.66666666666666], [236.0, 172.42857142857142], [237.0, 151.8181818181818], [238.0, 165.2], [239.0, 143.42857142857142], [232.0, 1019.0], [240.0, 180.43333333333334], [241.0, 67.1604938271605], [242.0, 102.72992700729931], [243.0, 33.63358778625954], [244.0, 14.67901234567901], [245.0, 14.414893617021287], [246.0, 17.440944881889756], [247.0, 26.490740740740744], [248.0, 47.8888888888889], [249.0, 24.532710280373838], [250.0, 15.2716049382716], [251.0, 193.43333333333334], [252.0, 110.43181818181817], [253.0, 129.52054794520544], [254.0, 47.33333333333333], [255.0, 25.40157480314961], [257.0, 71.37614678899082], [256.0, 13.333333333333334], [258.0, 16.0], [259.0, 20.210526315789476], [260.0, 80.08823529411765], [261.0, 21.9041095890411], [262.0, 13.954545454545457], [263.0, 44.47126436781609], [264.0, 50.4], [270.0, 25.31282051282052], [271.0, 60.03960396039605], [268.0, 18.137254901960787], [269.0, 33.78260869565218], [265.0, 96.63750000000002], [266.0, 86.1783439490446], [267.0, 21.240740740740744], [273.0, 22.19014084507042], [272.0, 59.56028368794326], [274.0, 14.411764705882353], [275.0, 49.11475409836066], [276.0, 14.13855421686747], [277.0, 28.792682926829258], [278.0, 45.92307692307691], [279.0, 20.349514563106798], [280.0, 16.360655737704917], [286.0, 14.999999999999993], [287.0, 15.513513513513516], [284.0, 8.431578947368422], [285.0, 178.71794871794867], [281.0, 27.385093167701864], [282.0, 32.403361344537814], [283.0, 10.95833333333334], [289.0, 15.184210526315788], [288.0, 41.20535714285711], [290.0, 24.0948275862069], [291.0, 37.129629629629626], [292.0, 25.185185185185194], [293.0, 11.620370370370368], [294.0, 10.69230769230769], [295.0, 39.48863636363637], [296.0, 19.52688172043011], [302.0, 26.76315789473684], [303.0, 30.20634920634921], [300.0, 53.61904761904763], [301.0, 40.474747474747474], [297.0, 27.132653061224488], [298.0, 22.022900763358784], [299.0, 71.79166666666666], [305.0, 42.59090909090909], [304.0, 122.71428571428571], [306.0, 30.09638554216868], [307.0, 26.096153846153847], [308.0, 54.2027027027027], [309.0, 58.645161290322584], [310.0, 92.63829787234042], [311.0, 53.6829268292683], [312.0, 36.0810810810811], [318.0, 82.37500000000001], [319.0, 157.60000000000002], [316.0, 260.5], [317.0, 83.0], [313.0, 80.5], [314.0, 37.83333333333333], [315.0, 40.333333333333336], [321.0, 265.6923076923077], [320.0, 81.57142857142857], [322.0, 392.0], [323.0, 118.13333333333334], [324.0, 203.39999999999998], [325.0, 184.65], [326.0, 109.33333333333333], [327.0, 242.41176470588235], [328.0, 860.8333333333333], [334.0, 14.433823529411772], [335.0, 9.409523809523812], [332.0, 18.691176470588236], [333.0, 17.890756302521], [329.0, 146.49295774647888], [330.0, 82.80198019801978], [331.0, 45.521739130434774], [337.0, 14.761904761904768], [336.0, 15.799999999999999], [338.0, 16.266129032258057], [339.0, 64.38686131386862], [340.0, 58.813084112149525], [341.0, 11.736111111111114], [342.0, 11.14685314685315], [343.0, 12.241379310344831], [344.0, 10.679738562091504], [350.0, 7.567567567567571], [351.0, 15.807692307692301], [348.0, 11.52], [349.0, 11.45454545454545], [345.0, 10.726744186046512], [346.0, 10.79347826086957], [347.0, 10.408450704225352], [353.0, 11.277777777777779], [352.0, 17.053030303030305], [354.0, 11.615819209039543], [355.0, 13.657894736842106], [356.0, 11.21951219512195], [357.0, 10.607843137254898], [358.0, 11.654970760233915], [359.0, 12.632911392405065], [360.0, 13.430555555555552], [366.0, 27.57798165137614], [367.0, 169.5], [364.0, 23.514563106796118], [365.0, 17.865030674846615], [361.0, 33.02158273381295], [362.0, 165.98648648648646], [363.0, 73.99270072992702], [369.0, 14.021582733812947], [368.0, 51.60937499999999], [370.0, 182.84745762711862], [371.0, 521.1176470588235], [372.0, 690.0], [373.0, 98.10638297872342], [374.0, 23.05263157894737], [375.0, 22.06172839506173], [376.0, 11.939759036144576], [382.0, 164.92], [383.0, 36.07216494845361], [380.0, 366.0729166666668], [381.0, 394.61111111111103], [377.0, 19.42748091603054], [378.0, 40.24444444444445], [379.0, 101.63513513513514], [385.0, 22.888888888888886], [384.0, 25.225806451612904], [386.0, 31.944444444444443], [387.0, 48.58333333333333], [388.0, 36.41538461538461], [389.0, 43.79661016949153], [390.0, 35.28571428571429], [391.0, 36.57142857142856], [392.0, 44.68421052631579], [398.0, 66.3529411764706], [399.0, 90.625], [396.0, 55.92857142857141], [397.0, 62.916666666666664], [393.0, 36.79069767441859], [394.0, 52.85714285714286], [395.0, 61.6111111111111], [401.0, 114.7142857142857], [400.0, 112.5], [402.0, 127.42857142857143], [403.0, 114.0], [404.0, 128.28571428571428], [405.0, 133.0], [406.0, 146.0], [407.0, 147.5625], [408.0, 168.4], [414.0, 176.0], [415.0, 248.00000000000003], [412.0, 208.75], [413.0, 178.0], [409.0, 128.75], [410.0, 188.0], [411.0, 176.8], [417.0, 100.0], [416.0, 181.05194805194805], [418.0, 160.32530120481928], [419.0, 126.9493670886076], [420.0, 245.86666666666662], [421.0, 180.25301204819274], [422.0, 35.87719298245613], [423.0, 161.53097345132744], [424.0, 83.35483870967742], [430.0, 59.702702702702695], [431.0, 71.255033557047], [428.0, 61.82399999999999], [429.0, 121.9731543624161], [425.0, 374.46399999999994], [426.0, 100.84507042253522], [427.0, 59.52032520325202], [433.0, 105.0062893081761], [432.0, 36.38931297709926], [434.0, 121.69014084507039], [435.0, 29.67826086956521], [436.0, 79.91089108910892], [437.0, 35.448818897637814], [438.0, 16.100775193798444], [439.0, 13.598214285714295], [440.0, 14.07920792079208], [446.0, 30.7972972972973], [447.0, 21.634782608695645], [444.0, 26.26041666666667], [445.0, 88.69902912621357], [441.0, 16.78030303030304], [442.0, 14.915254237288135], [443.0, 15.325301204819267], [449.0, 18.628865979381434], [448.0, 45.585365853658544], [450.0, 15.738317757009348], [451.0, 24.326923076923084], [452.0, 98.0176991150442], [453.0, 160.83516483516485], [454.0, 170.07913669064754], [455.0, 32.864000000000004], [456.0, 28.499999999999996], [462.0, 26.541284403669714], [463.0, 28.5859872611465], [460.0, 27.09890109890109], [461.0, 41.895348837209305], [457.0, 19.968750000000004], [458.0, 37.863636363636374], [459.0, 15.265060240963853], [465.0, 21.04629629629629], [464.0, 50.86734693877552], [466.0, 50.63698630136987], [467.0, 18.119565217391305], [468.0, 48.33333333333334], [469.0, 27.036363636363635], [470.0, 37.669811320754725], [471.0, 70.70689655172413], [472.0, 16.12781954887218], [478.0, 18.181818181818173], [479.0, 26.565789473684212], [476.0, 147.62499999999994], [477.0, 33.12605042016807], [473.0, 23.714285714285715], [474.0, 34.24050632911393], [475.0, 118.25423728813558], [481.0, 43.81132075471699], [480.0, 36.727272727272734], [482.0, 27.380000000000003], [483.0, 53.20930232558139], [484.0, 32.61764705882353], [485.0, 91.36585365853658], [486.0, 45.911764705882355], [487.0, 230.90000000000003], [488.0, 49.896551724137936], [494.0, 97.07692307692308], [495.0, 94.2], [492.0, 78.83333333333333], [493.0, 146.97142857142856], [489.0, 61.166666666666664], [490.0, 178.44444444444446], [491.0, 84.07142857142858], [497.0, 362.1818181818182], [496.0, 234.75], [498.0, 126.25], [499.0, 124.45000000000003], [500.0, 424.3333333333333], [501.0, 220.66666666666666], [502.0, 122.5], [503.0, 134.63636363636363], [504.0, 126.36046511627906], [510.0, 27.95833333333333], [511.0, 21.477611940298495], [508.0, 35.97297297297297], [509.0, 29.105263157894736], [505.0, 44.00000000000001], [506.0, 50.205882352941174], [507.0, 49.702702702702695], [515.0, 49.071999999999996], [512.0, 51.12121212121212], [527.0, 304.72477064220186], [525.0, 269.9545454545455], [526.0, 275.3898305084746], [522.0, 457.57142857142856], [524.0, 733.1320754716982], [513.0, 29.340136054421766], [514.0, 27.266666666666666], [516.0, 33.73636363636364], [517.0, 39.44943820224719], [518.0, 9.872], [519.0, 33.19266055045872], [528.0, 20.699346405228763], [542.0, 33.42424242424243], [543.0, 21.889763779527563], [540.0, 135.55714285714294], [541.0, 26.16666666666666], [538.0, 206.60294117647064], [539.0, 26.075471698113216], [536.0, 68.58767772511847], [537.0, 184.89565217391305], [529.0, 27.579881656804737], [530.0, 21.617647058823533], [531.0, 13.292397660818716], [532.0, 20.69629629629629], [533.0, 49.03488372093022], [534.0, 32.737804878048784], [535.0, 36.35338345864661], [520.0, 29.861878453038678], [521.0, 536.024], [547.0, 24.04950495049505], [544.0, 40.018018018018026], [558.0, 105.20192307692311], [559.0, 54.55000000000001], [556.0, 33.454545454545446], [557.0, 222.09649122807025], [554.0, 74.08823529411764], [555.0, 152.06741573033702], [545.0, 38.40298507462686], [546.0, 40.952702702702716], [548.0, 18.511235955056176], [549.0, 25.93793103448276], [550.0, 14.470588235294116], [551.0, 16.695312499999996], [560.0, 101.21978021978023], [574.0, 140.64285714285717], [575.0, 130.8], [572.0, 117.28571428571429], [573.0, 125.66666666666667], [570.0, 100.6], [571.0, 100.33333333333333], [568.0, 164.11111111111111], [569.0, 415.70588235294116], [561.0, 62.69014084507042], [562.0, 84.59016393442623], [563.0, 39.55555555555555], [564.0, 56.5], [565.0, 84.25925925925925], [566.0, 47.14285714285714], [567.0, 204.75], [552.0, 27.50617283950617], [553.0, 24.245901639344268], [579.0, 154.75], [576.0, 141.16666666666666], [591.0, 211.40449438202248], [589.0, 369.77777777777777], [590.0, 368.8125], [586.0, 402.5714285714286], [588.0, 515.2692307692308], [577.0, 142.6], [578.0, 282.0], [580.0, 912.8571428571428], [581.0, 582.625], [582.0, 196.5], [583.0, 437.5], [592.0, 119.30597014925367], [606.0, 67.21505376344085], [607.0, 15.380530973451327], [604.0, 13.073333333333336], [605.0, 13.005319148936167], [602.0, 29.31623931623932], [603.0, 33.335443037974684], [600.0, 30.108597285067873], [601.0, 6.754901960784315], [593.0, 77.33593749999996], [594.0, 51.91208791208792], [595.0, 53.631578947368425], [596.0, 17.8918918918919], [597.0, 16.891891891891895], [598.0, 222.9469696969697], [599.0, 296.3541666666667], [584.0, 371.57142857142856], [585.0, 415.85714285714283], [611.0, 168.0251572327043], [608.0, 21.357664233576642], [622.0, 11.993975903614459], [623.0, 10.09677419354839], [620.0, 8.395348837209303], [621.0, 14.040650406504067], [618.0, 12.545454545454545], [619.0, 19.132158590308368], [609.0, 54.25675675675676], [610.0, 388.5774647887324], [612.0, 63.79069767441861], [613.0, 27.26490066225166], [614.0, 18.305732484076426], [615.0, 11.429577464788728], [624.0, 32.82113821138211], [639.0, 22.422018348623848], [636.0, 20.806722689075624], [638.0, 1.0], [634.0, 562.3958333333334], [635.0, 227.80999999999995], [632.0, 69.3177570093458], [633.0, 130.36363636363637], [625.0, 101.36641221374045], [626.0, 275.0952380952382], [627.0, 155.67768595041323], [628.0, 76.34693877551018], [629.0, 15.373737373737372], [630.0, 16.771929824561415], [631.0, 111.68750000000001], [616.0, 11.036036036036034], [617.0, 16.257142857142867], [643.0, 102.6235294117647], [640.0, 851.3333333333333], [654.0, 52.653846153846146], [655.0, 68.42857142857143], [652.0, 644.8222222222223], [653.0, 45.375], [650.0, 90.19298245614034], [651.0, 564.1447368421051], [641.0, 57.54545454545453], [642.0, 30.04065040650405], [644.0, 39.73239436619717], [645.0, 81.25925925925925], [646.0, 186.56756756756758], [647.0, 76.95454545454545], [656.0, 80.125], [670.0, 159.125], [671.0, 176.3846153846154], [668.0, 134.71428571428572], [669.0, 167.0], [666.0, 171.5], [667.0, 156.16666666666669], [664.0, 91.8], [665.0, 140.66666666666669], [657.0, 85.61538461538463], [658.0, 86.92000000000002], [659.0, 108.48648648648648], [660.0, 89.91666666666667], [661.0, 123.7], [662.0, 133.42857142857144], [663.0, 107.5625], [648.0, 81.68], [649.0, 49.75], [675.0, 205.16666666666669], [672.0, 170.14285714285714], [686.0, 35.637168141592916], [687.0, 241.44700460829492], [684.0, 63.84210526315789], [685.0, 125.19327731092444], [682.0, 218.1511627906977], [683.0, 372.20118343195264], [673.0, 205.75], [674.0, 240.11111111111111], [676.0, 163.77777777777777], [677.0, 158.54081632653063], [678.0, 97.30985915492961], [679.0, 67.73684210526315], [688.0, 18.57142857142857], [702.0, 13.111111111111112], [703.0, 13.188976377952756], [700.0, 240.80851063829792], [701.0, 72.00961538461537], [698.0, 16.120567375886534], [699.0, 15.05357142857143], [696.0, 18.622807017543863], [697.0, 13.740384615384619], [689.0, 23.99378881987577], [690.0, 24.302083333333332], [691.0, 22.96992481203008], [692.0, 20.748251748251757], [693.0, 14.122641509433961], [694.0, 191.42222222222216], [695.0, 34.35616438356167], [680.0, 49.75000000000001], [681.0, 79.1086956521739], [707.0, 15.625000000000002], [704.0, 15.477272727272728], [718.0, 268.2205882352941], [719.0, 30.02654867256637], [716.0, 12.399999999999999], [717.0, 249.95867768595042], [714.0, 263.80000000000007], [715.0, 24.448818897637796], [705.0, 49.098214285714285], [706.0, 30.111940298507477], [708.0, 15.053191489361703], [709.0, 109.83146067415733], [710.0, 17.35772357723577], [711.0, 15.097902097902097], [720.0, 94.37599999999999], [734.0, 26.509803921568626], [735.0, 33.62745098039215], [732.0, 28.359999999999996], [733.0, 20.027027027027028], [730.0, 30.666666666666668], [731.0, 33.98461538461539], [728.0, 40.31428571428572], [729.0, 34.01538461538461], [721.0, 15.919540229885055], [722.0, 23.803797468354414], [723.0, 350.8425925925928], [724.0, 23.720000000000002], [725.0, 25.651685393258433], [726.0, 24.97777777777777], [727.0, 35.79591836734694], [712.0, 21.281690140845072], [713.0, 98.56756756756758], [739.0, 81.38095238095237], [736.0, 34.52542372881353], [750.0, 130.0], [751.0, 525.5], [748.0, 81.42857142857143], [749.0, 115.28571428571429], [746.0, 81.9047619047619], [747.0, 83.4375], [737.0, 39.20454545454546], [738.0, 41.22222222222221], [740.0, 109.0344827586207], [741.0, 44.678571428571416], [742.0, 68.66666666666667], [743.0, 84.46666666666667], [752.0, 89.14285714285714], [766.0, 51.25531914893618], [767.0, 135.47619047619048], [764.0, 120.28571428571426], [765.0, 67.24812030075184], [762.0, 617.5], [763.0, 202.07894736842104], [760.0, 161.875], [761.0, 162.50769230769234], [753.0, 73.71428571428571], [754.0, 132.4], [755.0, 90.125], [756.0, 106.0], [757.0, 112.125], [758.0, 196.5], [759.0, 116.2], [744.0, 45.84615384615385], [745.0, 74.53333333333335], [771.0, 11.890410958904107], [768.0, 251.88461538461556], [782.0, 62.10795454545453], [783.0, 99.49650349650338], [780.0, 658.3854166666665], [781.0, 73.00943396226411], [778.0, 4.439393939393939], [779.0, 5.35135135135135], [769.0, 13.839285714285715], [770.0, 14.18840579710145], [772.0, 120.24299065420563], [773.0, 297.6312056737589], [774.0, 610.5714285714287], [775.0, 61.46226415094342], [784.0, 22.879518072289148], [798.0, 17.640287769784162], [799.0, 23.07142857142858], [796.0, 17.092105263157894], [797.0, 17.205882352941163], [794.0, 48.67832167832166], [795.0, 31.095808383233535], [792.0, 37.155844155844136], [793.0, 17.627329192546593], [785.0, 50.00000000000001], [786.0, 434.33620689655163], [787.0, 51.0], [788.0, 7.571428571428571], [789.0, 14.722222222222221], [790.0, 19.06766917293234], [791.0, 12.599999999999998], [776.0, 20.1301775147929], [777.0, 13.449704142011838], [803.0, 325.00735294117646], [800.0, 49.59285714285716], [814.0, 14.06451612903226], [815.0, 15.183098591549294], [812.0, 101.6384615384616], [813.0, 96.43750000000001], [810.0, 23.596153846153843], [811.0, 142.24999999999997], [801.0, 121.72916666666666], [802.0, 78.3225806451613], [804.0, 11.861313868613133], [805.0, 12.65656565656566], [806.0, 26.103448275862057], [807.0, 21.4609375], [816.0, 17.018518518518526], [830.0, 133.86666666666667], [831.0, 86.37500000000001], [828.0, 44.40625], [829.0, 155.5263157894737], [826.0, 35.92857142857142], [827.0, 33.041666666666664], [824.0, 37.1], [825.0, 42.55319148936171], [817.0, 24.540983606557372], [818.0, 17.34722222222222], [819.0, 16.89583333333333], [820.0, 17.5], [821.0, 19.333333333333336], [822.0, 28.017857142857135], [823.0, 41.96551724137932], [808.0, 12.810606060606053], [809.0, 31.21951219512195], [835.0, 79.40000000000002], [832.0, 74.87499999999999], [846.0, 170.73684210526315], [847.0, 152.5], [844.0, 178.53846153846152], [845.0, 144.125], [842.0, 152.6], [843.0, 164.0], [833.0, 79.00000000000001], [834.0, 69.44444444444444], [836.0, 102.91666666666669], [837.0, 109.26315789473685], [838.0, 81.66666666666667], [839.0, 134.7142857142857], [848.0, 165.53846153846152], [862.0, 63.13615023474176], [863.0, 612.1980198019801], [860.0, 79.75757575757575], [861.0, 68.43262411347511], [858.0, 415.96590909090907], [859.0, 408.9244186046514], [856.0, 509.6181818181822], [857.0, 307.3636363636363], [849.0, 82.61666666666663], [850.0, 61.33082706766921], [851.0, 34.107843137254875], [852.0, 32.837209302325576], [853.0, 23.953846153846165], [854.0, 279.9246575342464], [855.0, 674.4021739130433], [840.0, 134.66666666666666], [841.0, 169.2857142857143], [867.0, 23.660256410256405], [864.0, 130.95135135135138], [878.0, 18.08333333333333], [879.0, 17.708955223880594], [876.0, 20.33333333333334], [877.0, 16.375886524822693], [874.0, 20.112068965517224], [875.0, 21.908256880733948], [865.0, 174.3723404255319], [866.0, 145.16666666666657], [868.0, 16.67241379310345], [869.0, 16.169014084507037], [870.0, 14.517985611510793], [871.0, 443.27777777777777], [880.0, 16.448648648648646], [894.0, 34.04615384615386], [895.0, 32.59090909090911], [892.0, 378.04504504504513], [893.0, 71.44186046511626], [890.0, 377.17283950617286], [891.0, 491.51063829787233], [888.0, 449.4883720930233], [889.0, 263.2021276595744], [881.0, 19.512820512820507], [882.0, 17.304964539007084], [883.0, 19.266666666666673], [884.0, 16.377551020408163], [885.0, 12.698275862068963], [886.0, 16.43478260869564], [887.0, 81.10156250000001], [872.0, 312.5734265734268], [873.0, 43.87769784172662], [896.0, 20.891304347826086], [897.0, 31.69230769230769], [898.0, 239.86075949367088], [899.0, 217.24418604651163], [900.0, 127.82303648961292], [1.0, 0.4444444444444444]], "isOverall": false, "label": "vertx-rxjava2", "isController": false}, {"data": [[871.2012332064884, 123.91259862987731]], "isOverall": false, "label": "vertx-rxjava2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 900.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 120845.06666666667, "minX": 1.60950576E12, "maxY": 943949.9, "series": [{"data": [[1.60950582E12, 628499.5333333333], [1.60950594E12, 120845.06666666667], [1.60950576E12, 520729.2], [1.60950588E12, 629299.9333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60950582E12, 942749.3], [1.60950594E12, 181267.6], [1.60950576E12, 781093.8], [1.60950588E12, 943949.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60950594E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 111.0373550526201, "minX": 1.60950576E12, "maxY": 135.61516012789843, "series": [{"data": [[1.60950582E12, 127.28660546340139], [1.60950594E12, 135.61516012789843], [1.60950576E12, 111.0373550526201], [1.60950588E12, 128.94955569145878]], "isOverall": false, "label": "vertx-rxjava2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60950594E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 111.03151298857867, "minX": 1.60950576E12, "maxY": 135.61116327462761, "series": [{"data": [[1.60950582E12, 127.27958896389465], [1.60950594E12, 135.61116327462761], [1.60950576E12, 111.03151298857867], [1.60950588E12, 128.94302081074594]], "isOverall": false, "label": "vertx-rxjava2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60950594E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 47.94322538471193, "minX": 1.60950576E12, "maxY": 54.03967710574398, "series": [{"data": [[1.60950582E12, 50.00257141532734], [1.60950594E12, 52.924922600619404], [1.60950576E12, 47.94322538471193], [1.60950588E12, 54.03967710574398]], "isOverall": false, "label": "vertx-rxjava2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60950594E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60950576E12, "maxY": 8118.0, "series": [{"data": [[1.60950582E12, 7271.0], [1.60950594E12, 7312.0], [1.60950576E12, 4106.0], [1.60950588E12, 8118.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60950582E12, 0.0], [1.60950594E12, 0.0], [1.60950576E12, 0.0], [1.60950588E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60950582E12, 131.0], [1.60950594E12, 1022.0], [1.60950576E12, 149.0], [1.60950588E12, 163.90000000000146]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60950582E12, 1249.0], [1.60950594E12, 1258.9900000000016], [1.60950576E12, 1252.0], [1.60950588E12, 1278.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60950582E12, 1046.0], [1.60950594E12, 1048.0], [1.60950576E12, 1043.0], [1.60950588E12, 1046.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60950594E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 1000.0, "maxY": 1042.0, "series": [{"data": [[1000.0, 73.0], [2000.0, 46.0], [3000.0, 33.0], [4000.0, 27.0], [5000.0, 26.0], [6000.0, 24.0], [7000.0, 23.0], [8000.0, 22.0], [9000.0, 21.0], [10000.0, 21.0], [11000.0, 21.0], [12000.0, 21.0], [13000.0, 21.0], [14000.0, 21.0], [15000.0, 21.0], [16000.0, 21.0], [17000.0, 21.0], [18000.0, 20.0], [19000.0, 21.0], [20000.0, 21.0], [21000.0, 20.0], [22000.0, 20.0], [23000.0, 19.0], [24000.0, 21.0], [25000.0, 20.0], [26000.0, 20.0], [27000.0, 22.0], [28000.0, 23.0], [29000.0, 20.0], [30000.0, 21.0], [31000.0, 22.0], [32000.0, 23.0], [33000.0, 22.0], [34000.0, 17.0], [36000.0, 34.5], [35000.0, 35.0], [37000.0, 33.0], [38000.0, 23.0], [39000.0, 23.0], [40000.0, 29.0], [41000.0, 17.0], [43000.0, 39.0], [42000.0, 23.0], [45000.0, 21.0], [44000.0, 29.0], [46000.0, 28.5], [47000.0, 55.0], [49000.0, 1042.0], [48000.0, 62.0], [51000.0, 76.0], [50000.0, 14.0], [53000.0, 50.5], [52000.0, 63.0], [55000.0, 60.0], [54000.0, 55.0], [56000.0, 14.0], [57000.0, 59.0], [58000.0, 55.0], [59000.0, 33.0], [60000.0, 40.0], [61000.0, 36.0], [62000.0, 114.5], [63000.0, 62.0], [65000.0, 46.0], [64000.0, 7.0], [68000.0, 67.5], [67000.0, 70.0], [71000.0, 97.0], [72000.0, 72.0], [77000.0, 59.0], [76000.0, 46.0], [78000.0, 64.0], [84000.0, 61.0], [86000.0, 81.0], [82000.0, 85.0], [87000.0, 63.0], [90000.0, 89.0], [89000.0, 72.0], [92000.0, 1030.0], [93000.0, 65.0], [98000.0, 53.5], [95000.0, 88.0], [99000.0, 52.0], [100000.0, 75.0], [101000.0, 52.0], [106000.0, 70.0], [105000.0, 61.0], [110000.0, 86.0], [111000.0, 61.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 111000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 1000.0, "maxY": 1042.0, "series": [{"data": [[1000.0, 73.0], [2000.0, 46.0], [3000.0, 33.0], [4000.0, 27.0], [5000.0, 26.0], [6000.0, 24.0], [7000.0, 23.0], [8000.0, 22.0], [9000.0, 21.0], [10000.0, 21.0], [11000.0, 21.0], [12000.0, 21.0], [13000.0, 21.0], [14000.0, 21.0], [15000.0, 21.0], [16000.0, 21.0], [17000.0, 21.0], [18000.0, 20.0], [19000.0, 21.0], [20000.0, 21.0], [21000.0, 20.0], [22000.0, 20.0], [23000.0, 19.0], [24000.0, 21.0], [25000.0, 20.0], [26000.0, 20.0], [27000.0, 22.0], [28000.0, 23.0], [29000.0, 20.0], [30000.0, 21.0], [31000.0, 22.0], [32000.0, 23.0], [33000.0, 22.0], [34000.0, 17.0], [36000.0, 34.5], [35000.0, 35.0], [37000.0, 33.0], [38000.0, 23.0], [39000.0, 23.0], [40000.0, 29.0], [41000.0, 17.0], [43000.0, 39.0], [42000.0, 23.0], [45000.0, 21.0], [44000.0, 29.0], [46000.0, 28.5], [47000.0, 55.0], [49000.0, 1042.0], [48000.0, 62.0], [51000.0, 76.0], [50000.0, 14.0], [53000.0, 50.5], [52000.0, 63.0], [55000.0, 60.0], [54000.0, 55.0], [56000.0, 14.0], [57000.0, 59.0], [58000.0, 55.0], [59000.0, 32.5], [60000.0, 40.0], [61000.0, 36.0], [62000.0, 114.5], [63000.0, 62.0], [65000.0, 46.0], [64000.0, 7.0], [68000.0, 67.5], [67000.0, 70.0], [71000.0, 97.0], [72000.0, 72.0], [77000.0, 59.0], [76000.0, 46.0], [78000.0, 64.0], [84000.0, 61.0], [86000.0, 81.0], [82000.0, 85.0], [87000.0, 63.0], [90000.0, 89.0], [89000.0, 72.0], [92000.0, 1030.0], [93000.0, 65.0], [98000.0, 53.5], [95000.0, 88.0], [99000.0, 52.0], [100000.0, 75.0], [101000.0, 52.0], [106000.0, 70.0], [105000.0, 61.0], [110000.0, 86.0], [111000.0, 61.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 111000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1298.9166666666667, "minX": 1.60950576E12, "maxY": 6840.366666666667, "series": [{"data": [[1.60950582E12, 6831.683333333333], [1.60950594E12, 1298.9166666666667], [1.60950576E12, 5674.4], [1.60950588E12, 6840.366666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60950594E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1313.5333333333333, "minX": 1.60950576E12, "maxY": 6840.216666666666, "series": [{"data": [[1.60950582E12, 6831.516666666666], [1.60950594E12, 1313.5333333333333], [1.60950576E12, 5660.1], [1.60950588E12, 6840.216666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60950594E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1313.5333333333333, "minX": 1.60950576E12, "maxY": 6840.216666666666, "series": [{"data": [[1.60950582E12, 6831.516666666666], [1.60950594E12, 1313.5333333333333], [1.60950576E12, 5660.1], [1.60950588E12, 6840.216666666666]], "isOverall": false, "label": "vertx-rxjava2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60950594E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1313.5333333333333, "minX": 1.60950576E12, "maxY": 6840.216666666666, "series": [{"data": [[1.60950582E12, 6831.516666666666], [1.60950594E12, 1313.5333333333333], [1.60950576E12, 5660.1], [1.60950588E12, 6840.216666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60950594E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

